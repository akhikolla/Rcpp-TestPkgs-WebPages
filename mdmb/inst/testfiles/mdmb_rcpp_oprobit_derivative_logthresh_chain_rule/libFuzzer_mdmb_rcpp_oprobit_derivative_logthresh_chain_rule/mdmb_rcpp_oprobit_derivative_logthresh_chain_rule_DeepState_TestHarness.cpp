// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// mdmb_rcpp_oprobit_derivative_logthresh_chain_rule_DeepState_TestHarness_generation.cpp and mdmb_rcpp_oprobit_derivative_logthresh_chain_rule_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::NumericMatrix mdmb_rcpp_oprobit_derivative_logthresh_chain_rule(Rcpp::NumericVector thresh_der, Rcpp::NumericVector probs, Rcpp::NumericVector dens_upp, Rcpp::NumericVector dens_low, Rcpp::IntegerVector y, double eps, int y_value);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector thresh_der  = RcppDeepState_NumericVector();
  std::string thresh_der_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mdmb/inst/testfiles/mdmb_rcpp_oprobit_derivative_logthresh_chain_rule/libFuzzer_mdmb_rcpp_oprobit_derivative_logthresh_chain_rule/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_thresh_der.qs";
  qs::c_qsave(thresh_der,thresh_der_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "thresh_der values: "<< thresh_der << std::endl;
  NumericVector probs  = RcppDeepState_NumericVector();
  std::string probs_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mdmb/inst/testfiles/mdmb_rcpp_oprobit_derivative_logthresh_chain_rule/libFuzzer_mdmb_rcpp_oprobit_derivative_logthresh_chain_rule/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_probs.qs";
  qs::c_qsave(probs,probs_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "probs values: "<< probs << std::endl;
  NumericVector dens_upp  = RcppDeepState_NumericVector();
  std::string dens_upp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mdmb/inst/testfiles/mdmb_rcpp_oprobit_derivative_logthresh_chain_rule/libFuzzer_mdmb_rcpp_oprobit_derivative_logthresh_chain_rule/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dens_upp.qs";
  qs::c_qsave(dens_upp,dens_upp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dens_upp values: "<< dens_upp << std::endl;
  NumericVector dens_low  = RcppDeepState_NumericVector();
  std::string dens_low_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mdmb/inst/testfiles/mdmb_rcpp_oprobit_derivative_logthresh_chain_rule/libFuzzer_mdmb_rcpp_oprobit_derivative_logthresh_chain_rule/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dens_low.qs";
  qs::c_qsave(dens_low,dens_low_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dens_low values: "<< dens_low << std::endl;
  IntegerVector y  = RcppDeepState_IntegerVector();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mdmb/inst/testfiles/mdmb_rcpp_oprobit_derivative_logthresh_chain_rule/libFuzzer_mdmb_rcpp_oprobit_derivative_logthresh_chain_rule/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y.qs";
  qs::c_qsave(y,y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericVector eps(1);
  eps[0]  = RcppDeepState_double();
  std::string eps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mdmb/inst/testfiles/mdmb_rcpp_oprobit_derivative_logthresh_chain_rule/libFuzzer_mdmb_rcpp_oprobit_derivative_logthresh_chain_rule/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_eps.qs";
  qs::c_qsave(eps,eps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "eps values: "<< eps << std::endl;
  IntegerVector y_value(1);
  y_value[0]  = RcppDeepState_int();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mdmb/inst/testfiles/mdmb_rcpp_oprobit_derivative_logthresh_chain_rule/libFuzzer_mdmb_rcpp_oprobit_derivative_logthresh_chain_rule/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y.qs";
  std::string y_value_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mdmb/inst/testfiles/mdmb_rcpp_oprobit_derivative_logthresh_chain_rule/libFuzzer_mdmb_rcpp_oprobit_derivative_logthresh_chain_rule/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y_value.qs";
  qs::c_qsave(y_value,y_value_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y_value values: "<< y_value << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    mdmb_rcpp_oprobit_derivative_logthresh_chain_rule(thresh_der,probs,dens_upp,dens_low,y,eps[0],y_value[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
