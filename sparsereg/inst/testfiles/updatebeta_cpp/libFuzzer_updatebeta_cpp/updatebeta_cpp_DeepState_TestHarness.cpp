// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// updatebeta_cpp_DeepState_TestHarness_generation.cpp and updatebeta_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List updatebeta_cpp(Rcpp::NumericVector X0, Rcpp::NumericVector y0, Rcpp::NumericVector betacurr0, Rcpp::NumericVector betamode0, Rcpp::NumericVector lambdavec0, Rcpp::NumericVector dtau0, Rcpp::NumericVector sigmasq0, Rcpp::NumericVector ps_sigmasq0, Rcpp::NumericVector lambdashrink0, Rcpp::NumericVector k0);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector X0  = RcppDeepState_NumericVector();
  std::string X0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparsereg/inst/testfiles/updatebeta_cpp/libFuzzer_updatebeta_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_X0.qs";
  qs::c_qsave(X0,X0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X0 values: "<< X0 << std::endl;
  NumericVector y0  = RcppDeepState_NumericVector();
  std::string y0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparsereg/inst/testfiles/updatebeta_cpp/libFuzzer_updatebeta_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y0.qs";
  qs::c_qsave(y0,y0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y0 values: "<< y0 << std::endl;
  NumericVector betacurr0  = RcppDeepState_NumericVector();
  std::string betacurr0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparsereg/inst/testfiles/updatebeta_cpp/libFuzzer_updatebeta_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_betacurr0.qs";
  qs::c_qsave(betacurr0,betacurr0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "betacurr0 values: "<< betacurr0 << std::endl;
  NumericVector betamode0  = RcppDeepState_NumericVector();
  std::string betamode0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparsereg/inst/testfiles/updatebeta_cpp/libFuzzer_updatebeta_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_betamode0.qs";
  qs::c_qsave(betamode0,betamode0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "betamode0 values: "<< betamode0 << std::endl;
  NumericVector lambdavec0  = RcppDeepState_NumericVector();
  std::string lambdavec0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparsereg/inst/testfiles/updatebeta_cpp/libFuzzer_updatebeta_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lambdavec0.qs";
  qs::c_qsave(lambdavec0,lambdavec0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambdavec0 values: "<< lambdavec0 << std::endl;
  NumericVector dtau0  = RcppDeepState_NumericVector();
  std::string dtau0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparsereg/inst/testfiles/updatebeta_cpp/libFuzzer_updatebeta_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dtau0.qs";
  qs::c_qsave(dtau0,dtau0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dtau0 values: "<< dtau0 << std::endl;
  NumericVector sigmasq0  = RcppDeepState_NumericVector();
  std::string sigmasq0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparsereg/inst/testfiles/updatebeta_cpp/libFuzzer_updatebeta_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_sigmasq0.qs";
  qs::c_qsave(sigmasq0,sigmasq0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sigmasq0 values: "<< sigmasq0 << std::endl;
  NumericVector ps_sigmasq0  = RcppDeepState_NumericVector();
  std::string ps_sigmasq0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparsereg/inst/testfiles/updatebeta_cpp/libFuzzer_updatebeta_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ps_sigmasq0.qs";
  qs::c_qsave(ps_sigmasq0,ps_sigmasq0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ps_sigmasq0 values: "<< ps_sigmasq0 << std::endl;
  NumericVector lambdashrink0  = RcppDeepState_NumericVector();
  std::string lambdashrink0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparsereg/inst/testfiles/updatebeta_cpp/libFuzzer_updatebeta_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lambdashrink0.qs";
  qs::c_qsave(lambdashrink0,lambdashrink0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambdashrink0 values: "<< lambdashrink0 << std::endl;
  NumericVector k0  = RcppDeepState_NumericVector();
  std::string k0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparsereg/inst/testfiles/updatebeta_cpp/libFuzzer_updatebeta_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_k0.qs";
  qs::c_qsave(k0,k0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "k0 values: "<< k0 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    updatebeta_cpp(X0,y0,betacurr0,betamode0,lambdavec0,dtau0,sigmasq0,ps_sigmasq0,lambdashrink0,k0);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
