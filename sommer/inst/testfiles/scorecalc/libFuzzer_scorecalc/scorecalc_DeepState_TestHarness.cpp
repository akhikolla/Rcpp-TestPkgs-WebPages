// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// scorecalc_DeepState_TestHarness_generation.cpp and scorecalc_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

arma::rowvec scorecalc(const arma::mat& Mimv, const arma::mat& Ymv, const arma::mat& Zmv, const arma::mat& Xmv, const arma::mat& Vinv, int nt, double minMAF);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  std::ofstream Mimv_stream;
  arma::mat Mimv  = RcppDeepState_mat();
  Mimv_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/sommer/inst/testfiles/scorecalc/inputs/Mimv");
  Mimv_stream << Mimv;
  std::cout << "Mimv values: "<< Mimv << std::endl;
  Mimv_stream.close();
  std::ofstream Ymv_stream;
  arma::mat Ymv  = RcppDeepState_mat();
  Ymv_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/sommer/inst/testfiles/scorecalc/inputs/Ymv");
  Ymv_stream << Ymv;
  std::cout << "Ymv values: "<< Ymv << std::endl;
  Ymv_stream.close();
  std::ofstream Zmv_stream;
  arma::mat Zmv  = RcppDeepState_mat();
  Zmv_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/sommer/inst/testfiles/scorecalc/inputs/Zmv");
  Zmv_stream << Zmv;
  std::cout << "Zmv values: "<< Zmv << std::endl;
  Zmv_stream.close();
  std::ofstream Xmv_stream;
  arma::mat Xmv  = RcppDeepState_mat();
  Xmv_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/sommer/inst/testfiles/scorecalc/inputs/Xmv");
  Xmv_stream << Xmv;
  std::cout << "Xmv values: "<< Xmv << std::endl;
  Xmv_stream.close();
  std::ofstream Vinv_stream;
  arma::mat Vinv  = RcppDeepState_mat();
  Vinv_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/sommer/inst/testfiles/scorecalc/inputs/Vinv");
  Vinv_stream << Vinv;
  std::cout << "Vinv values: "<< Vinv << std::endl;
  Vinv_stream.close();
  IntegerVector nt(1);
  nt[0]  = RcppDeepState_int();
  std::string nt_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sommer/inst/testfiles/scorecalc/libFuzzer_scorecalc/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nt.qs";
  qs::c_qsave(nt,nt_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nt values: "<< nt << std::endl;
  NumericVector minMAF(1);
  minMAF[0]  = RcppDeepState_double();
  std::string minMAF_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sommer/inst/testfiles/scorecalc/libFuzzer_scorecalc/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_minMAF.qs";
  qs::c_qsave(minMAF,minMAF_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "minMAF values: "<< minMAF << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    scorecalc(Mimv,Ymv,Zmv,Xmv,Vinv,nt[0],minMAF[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
