// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// mean_neighbors_all_periodic_cpp_DeepState_TestHarness_generation.cpp and mean_neighbors_all_periodic_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::NumericVector mean_neighbors_all_periodic_cpp(const Rcpp::NumericVector& data, const int& windowsize);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector data  = RcppDeepState_NumericVector();
  std::string data_t = "/home/akhila/fuzzer_packages/fuzzedpackages/scorepeak/inst/testfiles/mean_neighbors_all_periodic_cpp/libFuzzer_mean_neighbors_all_periodic_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_data.qs";
  qs::c_qsave(data,data_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "data values: "<< data << std::endl;
  IntegerVector windowsize(1);
  windowsize[0]  = RcppDeepState_int();
  std::string windowsize_t = "/home/akhila/fuzzer_packages/fuzzedpackages/scorepeak/inst/testfiles/mean_neighbors_all_periodic_cpp/libFuzzer_mean_neighbors_all_periodic_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_windowsize.qs";
  qs::c_qsave(windowsize,windowsize_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "windowsize values: "<< windowsize << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    mean_neighbors_all_periodic_cpp(data,windowsize[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
