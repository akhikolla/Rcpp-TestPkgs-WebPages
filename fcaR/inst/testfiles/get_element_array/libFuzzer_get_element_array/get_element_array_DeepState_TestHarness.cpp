// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// get_element_array_DeepState_TestHarness_generation.cpp and get_element_array_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double get_element_array(NumericVector I, int i, int j, int k);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector I  = RcppDeepState_NumericVector();
  std::string I_t = "/home/akhila/fuzzer_packages/fuzzedpackages/fcaR/inst/testfiles/get_element_array/libFuzzer_get_element_array/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_I.qs";
  qs::c_qsave(I,I_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "I values: "<< I << std::endl;
  IntegerVector i(1);
  i[0]  = RcppDeepState_int();
  std::string i_t = "/home/akhila/fuzzer_packages/fuzzedpackages/fcaR/inst/testfiles/get_element_array/libFuzzer_get_element_array/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_i.qs";
  qs::c_qsave(i,i_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "i values: "<< i << std::endl;
  IntegerVector j(1);
  j[0]  = RcppDeepState_int();
  std::string j_t = "/home/akhila/fuzzer_packages/fuzzedpackages/fcaR/inst/testfiles/get_element_array/libFuzzer_get_element_array/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_j.qs";
  qs::c_qsave(j,j_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "j values: "<< j << std::endl;
  IntegerVector k(1);
  k[0]  = RcppDeepState_int();
  std::string k_t = "/home/akhila/fuzzer_packages/fuzzedpackages/fcaR/inst/testfiles/get_element_array/libFuzzer_get_element_array/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_k.qs";
  qs::c_qsave(k,k_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "k values: "<< k << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    get_element_array(I,i[0],j[0],k[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
