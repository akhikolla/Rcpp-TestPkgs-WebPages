// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// flatten_sparse_C_DeepState_TestHarness_generation.cpp and flatten_sparse_C_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector flatten_sparse_C(IntegerVector p, IntegerVector i, NumericVector x, NumericVector dims);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  IntegerVector p  = RcppDeepState_IntegerVector();
  qs::c_qsave(p,"/home/akhila/fuzzer_packages/fuzzedpackages/fcaR/inst/testfiles/flatten_sparse_C/inputs/p.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p values: "<< p << std::endl;
  IntegerVector i  = RcppDeepState_IntegerVector();
  qs::c_qsave(i,"/home/akhila/fuzzer_packages/fuzzedpackages/fcaR/inst/testfiles/flatten_sparse_C/inputs/i.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "i values: "<< i << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  qs::c_qsave(x,"/home/akhila/fuzzer_packages/fuzzedpackages/fcaR/inst/testfiles/flatten_sparse_C/inputs/x.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector dims  = RcppDeepState_NumericVector();
  qs::c_qsave(dims,"/home/akhila/fuzzer_packages/fuzzedpackages/fcaR/inst/testfiles/flatten_sparse_C/inputs/dims.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dims values: "<< dims << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    flatten_sparse_C(p,i,x,dims);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
