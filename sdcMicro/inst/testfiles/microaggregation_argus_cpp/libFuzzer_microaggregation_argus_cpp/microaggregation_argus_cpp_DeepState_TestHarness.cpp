// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// microaggregation_argus_cpp_DeepState_TestHarness_generation.cpp and microaggregation_argus_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List microaggregation_argus_cpp(NumericMatrix inp, NumericVector k, NumericVector useOptimal);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix inp  = RcppDeepState_NumericMatrix();
  std::string inp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sdcMicro/inst/testfiles/microaggregation_argus_cpp/libFuzzer_microaggregation_argus_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_inp.qs";
  qs::c_qsave(inp,inp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "inp values: "<< inp << std::endl;
  NumericVector k  = RcppDeepState_NumericVector();
  std::string k_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sdcMicro/inst/testfiles/microaggregation_argus_cpp/libFuzzer_microaggregation_argus_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_k.qs";
  qs::c_qsave(k,k_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "k values: "<< k << std::endl;
  NumericVector useOptimal  = RcppDeepState_NumericVector();
  std::string useOptimal_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sdcMicro/inst/testfiles/microaggregation_argus_cpp/libFuzzer_microaggregation_argus_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_useOptimal.qs";
  qs::c_qsave(useOptimal,useOptimal_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "useOptimal values: "<< useOptimal << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    microaggregation_argus_cpp(inp,k,useOptimal);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
