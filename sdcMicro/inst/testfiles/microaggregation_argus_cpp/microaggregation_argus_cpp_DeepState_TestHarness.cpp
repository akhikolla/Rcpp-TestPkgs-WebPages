// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// microaggregation_argus_cpp_DeepState_TestHarness_generation.cpp and microaggregation_argus_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List microaggregation_argus_cpp(NumericMatrix inp, NumericVector k, NumericVector useOptimal);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix inp  = RcppDeepState_NumericMatrix();
  qs::c_qsave(inp,"/home/akhila/fuzzer_packages/fuzzedpackages/sdcMicro/inst/testfiles/microaggregation_argus_cpp/inputs/inp.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "inp values: "<< inp << std::endl;
  NumericVector k  = RcppDeepState_NumericVector();
  qs::c_qsave(k,"/home/akhila/fuzzer_packages/fuzzedpackages/sdcMicro/inst/testfiles/microaggregation_argus_cpp/inputs/k.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "k values: "<< k << std::endl;
  NumericVector useOptimal  = RcppDeepState_NumericVector();
  qs::c_qsave(useOptimal,"/home/akhila/fuzzer_packages/fuzzedpackages/sdcMicro/inst/testfiles/microaggregation_argus_cpp/inputs/useOptimal.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "useOptimal values: "<< useOptimal << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    microaggregation_argus_cpp(inp,k,useOptimal);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
