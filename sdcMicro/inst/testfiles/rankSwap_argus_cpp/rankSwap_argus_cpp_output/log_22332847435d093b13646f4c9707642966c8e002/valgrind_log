<?xml version="1.0"?>

<valgrindoutput>

<protocolversion>4</protocolversion>
<protocoltool>memcheck</protocoltool>

<preamble>
  <line>Memcheck, a memory error detector</line>
  <line>Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.</line>
  <line>Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info</line>
  <line>Command: ./rankSwap_argus_cpp_DeepState_TestHarness --input_test_file /home/akhila/fuzzer_packages/fuzzedpackages/sdcMicro/inst/testfiles/rankSwap_argus_cpp/rankSwap_argus_cpp_output/22332847435d093b13646f4c9707642966c8e002.pass</line>
</preamble>

<pid>2459199</pid>
<ppid>2459198</ppid>
<tool>memcheck</tool>

<args>
  <vargv>
    <exe>/usr/bin/valgrind.bin</exe>
    <arg>--xml=yes</arg>
    <arg>--xml-file=/home/akhila/fuzzer_packages/fuzzedpackages/sdcMicro/inst/testfiles/rankSwap_argus_cpp/rankSwap_argus_cpp_output/log_22332847435d093b13646f4c9707642966c8e002/valgrind_log</arg>
    <arg>--tool=memcheck</arg>
    <arg>--leak-check=yes</arg>
  </vargv>
  <argv>
    <exe>./rankSwap_argus_cpp_DeepState_TestHarness</exe>
    <arg>--input_test_file</arg>
    <arg>/home/akhila/fuzzer_packages/fuzzedpackages/sdcMicro/inst/testfiles/rankSwap_argus_cpp/rankSwap_argus_cpp_output/22332847435d093b13646f4c9707642966c8e002.pass</arg>
  </argv>
</args>

<status>
  <state>RUNNING</state>
  <time>00:00:00:00.125 </time>
</status>


<status>
  <state>FINISHED</state>
  <time>00:00:00:18.488 </time>
</status>

<error>
  <unique>0x1e</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>64 (8 direct, 56 indirect) bytes in 1 blocks are definitely lost in loss record 31 of 1,319</text>
    <leakedbytes>64</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x483C583</ip>
      <obj>/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator new[](unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x4D46298</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/sdcMicro/src/sdcMicro.so</obj>
      <fn>rankSwap_argus_cpp(Rcpp::Matrix&lt;14, Rcpp::PreserveStorage&gt;, Rcpp::Vector&lt;13, Rcpp::PreserveStorage&gt;)</fn>
      <dir>/home/akhila/fuzzer_packages/fuzzedpackages/sdcMicro/src</dir>
      <file>muargus_rankswap.cpp</file>
      <line>13</line>
    </frame>
    <frame>
      <ip>0x409F8C</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/sdcMicro/inst/testfiles/rankSwap_argus_cpp/rankSwap_argus_cpp_DeepState_TestHarness</obj>
      <fn>DeepState_Test__()</fn>
      <dir>/home/akhila/fuzzer_packages/fuzzedpackages/sdcMicro/inst/testfiles/rankSwap_argus_cpp</dir>
      <file>rankSwap_argus_cpp_DeepState_TestHarness.cpp</file>
      <line>26</line>
    </frame>
    <frame>
      <ip>0x409BA8</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/sdcMicro/inst/testfiles/rankSwap_argus_cpp/rankSwap_argus_cpp_DeepState_TestHarness</obj>
      <fn>DeepState_Run__()</fn>
      <dir>/home/akhila/fuzzer_packages/fuzzedpackages/sdcMicro/inst/testfiles/rankSwap_argus_cpp</dir>
      <file>rankSwap_argus_cpp_DeepState_TestHarness.cpp</file>
      <line>13</line>
    </frame>
    <frame>
      <ip>0x41DA48</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/sdcMicro/inst/testfiles/rankSwap_argus_cpp/rankSwap_argus_cpp_DeepState_TestHarness</obj>
      <fn>DeepState_RunTest.isra.0</fn>
    </frame>
    <frame>
      <ip>0x41DCE9</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/sdcMicro/inst/testfiles/rankSwap_argus_cpp/rankSwap_argus_cpp_DeepState_TestHarness</obj>
      <fn>DeepState_ForkAndRunTest</fn>
    </frame>
    <frame>
      <ip>0x41DDC4</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/sdcMicro/inst/testfiles/rankSwap_argus_cpp/rankSwap_argus_cpp_DeepState_TestHarness</obj>
      <fn>DeepState_RunSavedTestCase</fn>
    </frame>
    <frame>
      <ip>0x4076B5</ip>
      <obj>/home/akhila/fuzzer_packages/fuzzedpackages/sdcMicro/inst/testfiles/rankSwap_argus_cpp/rankSwap_argus_cpp_DeepState_TestHarness</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<errorcounts>
</errorcounts>

<suppcounts>
</suppcounts>

</valgrindoutput>


<status>
  <state>FINISHED</state>
  <time>00:00:00:19.995 </time>
</status>

<errorcounts>
</errorcounts>

<suppcounts>
</suppcounts>

</valgrindoutput>

