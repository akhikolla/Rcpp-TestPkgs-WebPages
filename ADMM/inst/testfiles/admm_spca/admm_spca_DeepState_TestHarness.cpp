// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// admm_spca_DeepState_TestHarness_generation.cpp and admm_spca_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List admm_spca(const arma::mat& Sigma, const double reltol, const double abstol, const int maxiter, double mu, double rho);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  std::ofstream Sigma_stream;
  arma::mat Sigma  = RcppDeepState_mat();
  Sigma_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/ADMM/inst/testfiles/admm_spca/inputs/Sigma");
  Sigma_stream << Sigma;
  std::cout << "Sigma values: "<< Sigma << std::endl;
  Sigma_stream.close();
  NumericVector reltol(1);
  reltol[0]  = RcppDeepState_double();
  qs::c_qsave(reltol,"/home/akhila/fuzzer_packages/fuzzedpackages/ADMM/inst/testfiles/admm_spca/inputs/reltol.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "reltol values: "<< reltol << std::endl;
  NumericVector abstol(1);
  abstol[0]  = RcppDeepState_double();
  qs::c_qsave(abstol,"/home/akhila/fuzzer_packages/fuzzedpackages/ADMM/inst/testfiles/admm_spca/inputs/abstol.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "abstol values: "<< abstol << std::endl;
  IntegerVector maxiter(1);
  maxiter[0]  = RcppDeepState_int();
  qs::c_qsave(maxiter,"/home/akhila/fuzzer_packages/fuzzedpackages/ADMM/inst/testfiles/admm_spca/inputs/maxiter.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxiter values: "<< maxiter << std::endl;
  NumericVector mu(1);
  mu[0]  = RcppDeepState_double();
  qs::c_qsave(mu,"/home/akhila/fuzzer_packages/fuzzedpackages/ADMM/inst/testfiles/admm_spca/inputs/mu.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu values: "<< mu << std::endl;
  NumericVector rho(1);
  rho[0]  = RcppDeepState_double();
  qs::c_qsave(rho,"/home/akhila/fuzzer_packages/fuzzedpackages/ADMM/inst/testfiles/admm_spca/inputs/rho.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rho values: "<< rho << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    admm_spca(Sigma,reltol[0],abstol[0],maxiter[0],mu[0],rho[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
