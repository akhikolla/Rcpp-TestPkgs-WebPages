// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// admm_spca_DeepState_TestHarness_generation.cpp and admm_spca_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List admm_spca(const arma::mat& Sigma, const double reltol, const double abstol, const int maxiter, double mu, double rho);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  std::ofstream Sigma_stream;
  arma::mat Sigma  = RcppDeepState_mat();
  Sigma_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/ADMM/inst/testfiles/admm_spca/inputs/Sigma");
  Sigma_stream << Sigma;
  std::cout << "Sigma values: "<< Sigma << std::endl;
  Sigma_stream.close();
  NumericVector reltol(1);
  reltol[0]  = RcppDeepState_double();
  std::string reltol_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ADMM/inst/testfiles/admm_spca/libFuzzer_admm_spca/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_reltol.qs";
  qs::c_qsave(reltol,reltol_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "reltol values: "<< reltol << std::endl;
  NumericVector abstol(1);
  abstol[0]  = RcppDeepState_double();
  std::string abstol_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ADMM/inst/testfiles/admm_spca/libFuzzer_admm_spca/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_abstol.qs";
  qs::c_qsave(abstol,abstol_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "abstol values: "<< abstol << std::endl;
  IntegerVector maxiter(1);
  maxiter[0]  = RcppDeepState_int();
  std::string maxiter_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ADMM/inst/testfiles/admm_spca/libFuzzer_admm_spca/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_maxiter.qs";
  qs::c_qsave(maxiter,maxiter_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxiter values: "<< maxiter << std::endl;
  NumericVector mu(1);
  mu[0]  = RcppDeepState_double();
  std::string mu_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ADMM/inst/testfiles/admm_spca/libFuzzer_admm_spca/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_mu.qs";
  qs::c_qsave(mu,mu_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu values: "<< mu << std::endl;
  NumericVector rho(1);
  rho[0]  = RcppDeepState_double();
  std::string rho_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ADMM/inst/testfiles/admm_spca/libFuzzer_admm_spca/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_rho.qs";
  qs::c_qsave(rho,rho_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rho values: "<< rho << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    admm_spca(Sigma,reltol[0],abstol[0],maxiter[0],mu[0],rho[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
