// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// Ensemble_EN_Objective_DeepState_TestHarness_generation.cpp and Ensemble_EN_Objective_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double Ensemble_EN_Objective(const arma::mat& current_res, const arma::mat& beta, const double& lambda_sparsity, const double& lambda_diversity, const double& alpha);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  std::ofstream current_res_stream;
  arma::mat current_res  = RcppDeepState_mat();
  current_res_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/SplitReg/inst/testfiles/Ensemble_EN_Objective/inputs/current_res");
  current_res_stream << current_res;
  std::cout << "current_res values: "<< current_res << std::endl;
  current_res_stream.close();
  std::ofstream beta_stream;
  arma::mat beta  = RcppDeepState_mat();
  beta_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/SplitReg/inst/testfiles/Ensemble_EN_Objective/inputs/beta");
  beta_stream << beta;
  std::cout << "beta values: "<< beta << std::endl;
  beta_stream.close();
  NumericVector lambda_sparsity(1);
  lambda_sparsity[0]  = RcppDeepState_double();
  std::string lambda_sparsity_t = "/home/akhila/fuzzer_packages/fuzzedpackages/SplitReg/inst/testfiles/Ensemble_EN_Objective/libFuzzer_Ensemble_EN_Objective/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lambda_sparsity.qs";
  qs::c_qsave(lambda_sparsity,lambda_sparsity_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda_sparsity values: "<< lambda_sparsity << std::endl;
  NumericVector lambda_diversity(1);
  lambda_diversity[0]  = RcppDeepState_double();
  std::string lambda_diversity_t = "/home/akhila/fuzzer_packages/fuzzedpackages/SplitReg/inst/testfiles/Ensemble_EN_Objective/libFuzzer_Ensemble_EN_Objective/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lambda_diversity.qs";
  qs::c_qsave(lambda_diversity,lambda_diversity_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda_diversity values: "<< lambda_diversity << std::endl;
  NumericVector alpha(1);
  alpha[0]  = RcppDeepState_double();
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/SplitReg/inst/testfiles/Ensemble_EN_Objective/libFuzzer_Ensemble_EN_Objective/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_alpha.qs";
  qs::c_qsave(alpha,alpha_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    Ensemble_EN_Objective(current_res,beta,lambda_sparsity[0],lambda_diversity[0],alpha[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
