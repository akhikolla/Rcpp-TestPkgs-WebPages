// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// get_colors_DeepState_TestHarness_generation.cpp and get_colors_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::IntegerVector get_colors(const IntegerVector& pntr, const IntegerVector& idx, const int nvars);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector pntr  = RcppDeepState_IntegerVector();
  std::string pntr_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparseHessianFD/inst/testfiles/get_colors/libFuzzer_get_colors/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_pntr.qs";
  qs::c_qsave(pntr,pntr_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "pntr values: "<< pntr << std::endl;
  IntegerVector idx  = RcppDeepState_IntegerVector();
  std::string idx_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparseHessianFD/inst/testfiles/get_colors/libFuzzer_get_colors/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_idx.qs";
  qs::c_qsave(idx,idx_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "idx values: "<< idx << std::endl;
  IntegerVector nvars(1);
  nvars[0]  = RcppDeepState_int();
  std::string nvars_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparseHessianFD/inst/testfiles/get_colors/libFuzzer_get_colors/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nvars.qs";
  qs::c_qsave(nvars,nvars_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nvars values: "<< nvars << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    get_colors(pntr,idx,nvars[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
