// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// get_colors_DeepState_TestHarness_generation.cpp and get_colors_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::IntegerVector get_colors(const IntegerVector& pntr, const IntegerVector& idx, const int nvars);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  IntegerVector pntr  = RcppDeepState_IntegerVector();
  qs::c_qsave(pntr,"/home/akhila/fuzzer_packages/fuzzedpackages/sparseHessianFD/inst/testfiles/get_colors/inputs/pntr.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "pntr values: "<< pntr << std::endl;
  IntegerVector idx  = RcppDeepState_IntegerVector();
  qs::c_qsave(idx,"/home/akhila/fuzzer_packages/fuzzedpackages/sparseHessianFD/inst/testfiles/get_colors/inputs/idx.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "idx values: "<< idx << std::endl;
  IntegerVector nvars(1);
  nvars[0]  = RcppDeepState_int();
  qs::c_qsave(nvars,"/home/akhila/fuzzer_packages/fuzzedpackages/sparseHessianFD/inst/testfiles/get_colors/inputs/nvars.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nvars values: "<< nvars << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    get_colors(pntr,idx,nvars[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
