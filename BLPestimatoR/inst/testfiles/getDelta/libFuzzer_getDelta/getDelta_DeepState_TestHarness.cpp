// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// getDelta_DeepState_TestHarness_generation.cpp and getDelta_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List getDelta(const NumericMatrix& theta2, const NumericVector& deltaOld, const IntegerVector& cdid, const IntegerVector& cdindex, const NumericMatrix& Xrandom, const NumericVector& obsshare, const double& innerCrit, const int& innerMaxit, const int& printLevel, const NumericMatrix& indices, const NumericMatrix& nodesRcMktShape, const NumericMatrix& nodesDemMktShape, const NumericVector& weights);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix theta2  = RcppDeepState_NumericMatrix();
  std::string theta2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/BLPestimatoR/inst/testfiles/getDelta/libFuzzer_getDelta/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_theta2.qs";
  qs::c_qsave(theta2,theta2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta2 values: "<< theta2 << std::endl;
  NumericVector deltaOld  = RcppDeepState_NumericVector();
  std::string deltaOld_t = "/home/akhila/fuzzer_packages/fuzzedpackages/BLPestimatoR/inst/testfiles/getDelta/libFuzzer_getDelta/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_deltaOld.qs";
  qs::c_qsave(deltaOld,deltaOld_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "deltaOld values: "<< deltaOld << std::endl;
  IntegerVector cdid  = RcppDeepState_IntegerVector();
  std::string cdid_t = "/home/akhila/fuzzer_packages/fuzzedpackages/BLPestimatoR/inst/testfiles/getDelta/libFuzzer_getDelta/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_cdid.qs";
  qs::c_qsave(cdid,cdid_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "cdid values: "<< cdid << std::endl;
  IntegerVector cdindex  = RcppDeepState_IntegerVector();
  std::string cdindex_t = "/home/akhila/fuzzer_packages/fuzzedpackages/BLPestimatoR/inst/testfiles/getDelta/libFuzzer_getDelta/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_cdindex.qs";
  qs::c_qsave(cdindex,cdindex_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "cdindex values: "<< cdindex << std::endl;
  NumericMatrix Xrandom  = RcppDeepState_NumericMatrix();
  std::string Xrandom_t = "/home/akhila/fuzzer_packages/fuzzedpackages/BLPestimatoR/inst/testfiles/getDelta/libFuzzer_getDelta/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Xrandom.qs";
  qs::c_qsave(Xrandom,Xrandom_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Xrandom values: "<< Xrandom << std::endl;
  NumericVector obsshare  = RcppDeepState_NumericVector();
  std::string obsshare_t = "/home/akhila/fuzzer_packages/fuzzedpackages/BLPestimatoR/inst/testfiles/getDelta/libFuzzer_getDelta/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_obsshare.qs";
  qs::c_qsave(obsshare,obsshare_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "obsshare values: "<< obsshare << std::endl;
  NumericVector innerCrit(1);
  innerCrit[0]  = RcppDeepState_double();
  std::string innerCrit_t = "/home/akhila/fuzzer_packages/fuzzedpackages/BLPestimatoR/inst/testfiles/getDelta/libFuzzer_getDelta/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_innerCrit.qs";
  qs::c_qsave(innerCrit,innerCrit_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "innerCrit values: "<< innerCrit << std::endl;
  IntegerVector innerMaxit(1);
  innerMaxit[0]  = RcppDeepState_int();
  std::string innerMaxit_t = "/home/akhila/fuzzer_packages/fuzzedpackages/BLPestimatoR/inst/testfiles/getDelta/libFuzzer_getDelta/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_innerMaxit.qs";
  qs::c_qsave(innerMaxit,innerMaxit_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "innerMaxit values: "<< innerMaxit << std::endl;
  IntegerVector printLevel(1);
  printLevel[0]  = RcppDeepState_int();
  std::string printLevel_t = "/home/akhila/fuzzer_packages/fuzzedpackages/BLPestimatoR/inst/testfiles/getDelta/libFuzzer_getDelta/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_printLevel.qs";
  qs::c_qsave(printLevel,printLevel_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "printLevel values: "<< printLevel << std::endl;
  NumericMatrix indices  = RcppDeepState_NumericMatrix();
  std::string indices_t = "/home/akhila/fuzzer_packages/fuzzedpackages/BLPestimatoR/inst/testfiles/getDelta/libFuzzer_getDelta/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_indices.qs";
  qs::c_qsave(indices,indices_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "indices values: "<< indices << std::endl;
  NumericMatrix nodesRcMktShape  = RcppDeepState_NumericMatrix();
  std::string nodesRcMktShape_t = "/home/akhila/fuzzer_packages/fuzzedpackages/BLPestimatoR/inst/testfiles/getDelta/libFuzzer_getDelta/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nodesRcMktShape.qs";
  qs::c_qsave(nodesRcMktShape,nodesRcMktShape_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nodesRcMktShape values: "<< nodesRcMktShape << std::endl;
  NumericMatrix nodesDemMktShape  = RcppDeepState_NumericMatrix();
  std::string nodesDemMktShape_t = "/home/akhila/fuzzer_packages/fuzzedpackages/BLPestimatoR/inst/testfiles/getDelta/libFuzzer_getDelta/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nodesDemMktShape.qs";
  qs::c_qsave(nodesDemMktShape,nodesDemMktShape_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nodesDemMktShape values: "<< nodesDemMktShape << std::endl;
  NumericVector weights  = RcppDeepState_NumericVector();
  std::string weights_t = "/home/akhila/fuzzer_packages/fuzzedpackages/BLPestimatoR/inst/testfiles/getDelta/libFuzzer_getDelta/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_weights.qs";
  qs::c_qsave(weights,weights_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "weights values: "<< weights << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    getDelta(theta2,deltaOld,cdid,cdindex,Xrandom,obsshare,innerCrit[0],innerMaxit[0],printLevel[0],indices,nodesRcMktShape,nodesDemMktShape,weights);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
