// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// getSjtMod_DeepState_TestHarness_generation.cpp and getSjtMod_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector getSjtMod(const NumericMatrix& expmu, const NumericVector& expdelta, const int& nprodt, const int& startpos, const NumericVector& weights);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix expmu  = RcppDeepState_NumericMatrix();
  qs::c_qsave(expmu,"/home/akhila/fuzzer_packages/fuzzedpackages/BLPestimatoR/inst/testfiles/getSjtMod/inputs/expmu.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "expmu values: "<< expmu << std::endl;
  NumericVector expdelta  = RcppDeepState_NumericVector();
  qs::c_qsave(expdelta,"/home/akhila/fuzzer_packages/fuzzedpackages/BLPestimatoR/inst/testfiles/getSjtMod/inputs/expdelta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "expdelta values: "<< expdelta << std::endl;
  IntegerVector nprodt(1);
  nprodt[0]  = RcppDeepState_int();
  qs::c_qsave(nprodt,"/home/akhila/fuzzer_packages/fuzzedpackages/BLPestimatoR/inst/testfiles/getSjtMod/inputs/nprodt.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nprodt values: "<< nprodt << std::endl;
  IntegerVector startpos(1);
  startpos[0]  = RcppDeepState_int();
  qs::c_qsave(startpos,"/home/akhila/fuzzer_packages/fuzzedpackages/BLPestimatoR/inst/testfiles/getSjtMod/inputs/startpos.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "startpos values: "<< startpos << std::endl;
  NumericVector weights  = RcppDeepState_NumericVector();
  qs::c_qsave(weights,"/home/akhila/fuzzer_packages/fuzzedpackages/BLPestimatoR/inst/testfiles/getSjtMod/inputs/weights.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "weights values: "<< weights << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    getSjtMod(expmu,expdelta,nprodt[0],startpos[0],weights);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
