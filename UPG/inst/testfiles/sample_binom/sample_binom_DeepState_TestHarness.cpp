// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// sample_binom_DeepState_TestHarness_generation.cpp and sample_binom_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List sample_binom(arma::mat y_matrix, arma::mat Ni, arma::mat X, arma::mat beta_old, int nsave, int nburn, double A0, double d0, double D0, double G0, int BOOST, int verbose, int prior_ig);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  std::ofstream y_matrix_stream;
  arma::mat y_matrix  = RcppDeepState_mat();
  y_matrix_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/UPG/inst/testfiles/sample_binom/inputs/y_matrix");
  y_matrix_stream << y_matrix;
  std::cout << "y_matrix values: "<< y_matrix << std::endl;
  y_matrix_stream.close();
  std::ofstream Ni_stream;
  arma::mat Ni  = RcppDeepState_mat();
  Ni_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/UPG/inst/testfiles/sample_binom/inputs/Ni");
  Ni_stream << Ni;
  std::cout << "Ni values: "<< Ni << std::endl;
  Ni_stream.close();
  std::ofstream X_stream;
  arma::mat X  = RcppDeepState_mat();
  X_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/UPG/inst/testfiles/sample_binom/inputs/X");
  X_stream << X;
  std::cout << "X values: "<< X << std::endl;
  X_stream.close();
  std::ofstream beta_old_stream;
  arma::mat beta_old  = RcppDeepState_mat();
  beta_old_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/UPG/inst/testfiles/sample_binom/inputs/beta_old");
  beta_old_stream << beta_old;
  std::cout << "beta_old values: "<< beta_old << std::endl;
  beta_old_stream.close();
  IntegerVector nsave(1);
  nsave[0]  = RcppDeepState_int();
  qs::c_qsave(nsave,"/home/akhila/fuzzer_packages/fuzzedpackages/UPG/inst/testfiles/sample_binom/inputs/nsave.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nsave values: "<< nsave << std::endl;
  IntegerVector nburn(1);
  nburn[0]  = RcppDeepState_int();
  qs::c_qsave(nburn,"/home/akhila/fuzzer_packages/fuzzedpackages/UPG/inst/testfiles/sample_binom/inputs/nburn.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nburn values: "<< nburn << std::endl;
  NumericVector A0(1);
  A0[0]  = RcppDeepState_double();
  qs::c_qsave(A0,"/home/akhila/fuzzer_packages/fuzzedpackages/UPG/inst/testfiles/sample_binom/inputs/A0.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "A0 values: "<< A0 << std::endl;
  NumericVector d0(1);
  d0[0]  = RcppDeepState_double();
  qs::c_qsave(d0,"/home/akhila/fuzzer_packages/fuzzedpackages/UPG/inst/testfiles/sample_binom/inputs/d0.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "d0 values: "<< d0 << std::endl;
  NumericVector D0(1);
  D0[0]  = RcppDeepState_double();
  qs::c_qsave(D0,"/home/akhila/fuzzer_packages/fuzzedpackages/UPG/inst/testfiles/sample_binom/inputs/D0.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "D0 values: "<< D0 << std::endl;
  NumericVector G0(1);
  G0[0]  = RcppDeepState_double();
  qs::c_qsave(G0,"/home/akhila/fuzzer_packages/fuzzedpackages/UPG/inst/testfiles/sample_binom/inputs/G0.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "G0 values: "<< G0 << std::endl;
  IntegerVector BOOST(1);
  BOOST[0]  = RcppDeepState_int();
  qs::c_qsave(BOOST,"/home/akhila/fuzzer_packages/fuzzedpackages/UPG/inst/testfiles/sample_binom/inputs/BOOST.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "BOOST values: "<< BOOST << std::endl;
  IntegerVector verbose(1);
  verbose[0]  = RcppDeepState_int();
  qs::c_qsave(verbose,"/home/akhila/fuzzer_packages/fuzzedpackages/UPG/inst/testfiles/sample_binom/inputs/verbose.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "verbose values: "<< verbose << std::endl;
  IntegerVector prior_ig(1);
  prior_ig[0]  = RcppDeepState_int();
  qs::c_qsave(prior_ig,"/home/akhila/fuzzer_packages/fuzzedpackages/UPG/inst/testfiles/sample_binom/inputs/prior_ig.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "prior_ig values: "<< prior_ig << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    sample_binom(y_matrix,Ni,X,beta_old,nsave[0],nburn[0],A0[0],d0[0],D0[0],G0[0],BOOST[0],verbose[0],prior_ig[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
