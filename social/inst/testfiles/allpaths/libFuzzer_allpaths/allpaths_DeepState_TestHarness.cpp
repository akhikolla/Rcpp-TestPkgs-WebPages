// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// allpaths_DeepState_TestHarness_generation.cpp and allpaths_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix allpaths(NumericMatrix adjMatrix, int startNode, int endNode, int maxDepth, int nPilot, int nEstimation);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix adjMatrix  = RcppDeepState_NumericMatrix();
  std::string adjMatrix_t = "/home/akhila/fuzzer_packages/fuzzedpackages/social/inst/testfiles/allpaths/libFuzzer_allpaths/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_adjMatrix.qs";
  qs::c_qsave(adjMatrix,adjMatrix_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "adjMatrix values: "<< adjMatrix << std::endl;
  IntegerVector startNode(1);
  startNode[0]  = RcppDeepState_int();
  std::string startNode_t = "/home/akhila/fuzzer_packages/fuzzedpackages/social/inst/testfiles/allpaths/libFuzzer_allpaths/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_startNode.qs";
  qs::c_qsave(startNode,startNode_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "startNode values: "<< startNode << std::endl;
  IntegerVector endNode(1);
  endNode[0]  = RcppDeepState_int();
  std::string endNode_t = "/home/akhila/fuzzer_packages/fuzzedpackages/social/inst/testfiles/allpaths/libFuzzer_allpaths/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_endNode.qs";
  qs::c_qsave(endNode,endNode_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "endNode values: "<< endNode << std::endl;
  IntegerVector maxDepth(1);
  maxDepth[0]  = RcppDeepState_int();
  std::string maxDepth_t = "/home/akhila/fuzzer_packages/fuzzedpackages/social/inst/testfiles/allpaths/libFuzzer_allpaths/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_maxDepth.qs";
  qs::c_qsave(maxDepth,maxDepth_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxDepth values: "<< maxDepth << std::endl;
  IntegerVector nPilot(1);
  nPilot[0]  = RcppDeepState_int();
  std::string nPilot_t = "/home/akhila/fuzzer_packages/fuzzedpackages/social/inst/testfiles/allpaths/libFuzzer_allpaths/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nPilot.qs";
  qs::c_qsave(nPilot,nPilot_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nPilot values: "<< nPilot << std::endl;
  IntegerVector nEstimation(1);
  nEstimation[0]  = RcppDeepState_int();
  std::string nEstimation_t = "/home/akhila/fuzzer_packages/fuzzedpackages/social/inst/testfiles/allpaths/libFuzzer_allpaths/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nEstimation.qs";
  qs::c_qsave(nEstimation,nEstimation_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nEstimation values: "<< nEstimation << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    allpaths(adjMatrix,startNode[0],endNode[0],maxDepth[0],nPilot[0],nEstimation[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
