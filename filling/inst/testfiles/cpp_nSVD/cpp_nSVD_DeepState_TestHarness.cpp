// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// cpp_nSVD_DeepState_TestHarness_generation.cpp and cpp_nSVD_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

arma::mat cpp_nSVD(arma::mat& X, arma::mat& idmat, arma::mat& Minit, const double lambda, const double tol, const int maxiter);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  std::ofstream X_stream;
  arma::mat X  = RcppDeepState_mat();
  X_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/filling/inst/testfiles/cpp_nSVD/inputs/X");
  X_stream << X;
  std::cout << "X values: "<< X << std::endl;
  X_stream.close();
  std::ofstream idmat_stream;
  arma::mat idmat  = RcppDeepState_mat();
  idmat_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/filling/inst/testfiles/cpp_nSVD/inputs/idmat");
  idmat_stream << idmat;
  std::cout << "idmat values: "<< idmat << std::endl;
  idmat_stream.close();
  std::ofstream Minit_stream;
  arma::mat Minit  = RcppDeepState_mat();
  Minit_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/filling/inst/testfiles/cpp_nSVD/inputs/Minit");
  Minit_stream << Minit;
  std::cout << "Minit values: "<< Minit << std::endl;
  Minit_stream.close();
  NumericVector lambda(1);
  lambda[0]  = RcppDeepState_double();
  qs::c_qsave(lambda,"/home/akhila/fuzzer_packages/fuzzedpackages/filling/inst/testfiles/cpp_nSVD/inputs/lambda.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda values: "<< lambda << std::endl;
  NumericVector tol(1);
  tol[0]  = RcppDeepState_double();
  qs::c_qsave(tol,"/home/akhila/fuzzer_packages/fuzzedpackages/filling/inst/testfiles/cpp_nSVD/inputs/tol.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tol values: "<< tol << std::endl;
  IntegerVector maxiter(1);
  maxiter[0]  = RcppDeepState_int();
  qs::c_qsave(maxiter,"/home/akhila/fuzzer_packages/fuzzedpackages/filling/inst/testfiles/cpp_nSVD/inputs/maxiter.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxiter values: "<< maxiter << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    cpp_nSVD(X,idmat,Minit,lambda[0],tol[0],maxiter[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
