// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// SIGMA_DeepState_TestHarness_generation.cpp and SIGMA_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

arma::mat SIGMA(double Phi, int TempCorInd, arma::mat const& TimeDist, int Nu);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector Phi(1);
  Phi[0]  = RcppDeepState_double();
  std::string Phi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/womblR/inst/testfiles/SIGMA/libFuzzer_SIGMA/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Phi.qs";
  qs::c_qsave(Phi,Phi_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Phi values: "<< Phi << std::endl;
  IntegerVector TempCorInd(1);
  TempCorInd[0]  = RcppDeepState_int();
  std::string TempCorInd_t = "/home/akhila/fuzzer_packages/fuzzedpackages/womblR/inst/testfiles/SIGMA/libFuzzer_SIGMA/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_TempCorInd.qs";
  qs::c_qsave(TempCorInd,TempCorInd_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "TempCorInd values: "<< TempCorInd << std::endl;
  std::ofstream TimeDist_stream;
  arma::mat TimeDist  = RcppDeepState_mat();
  TimeDist_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/womblR/inst/testfiles/SIGMA/inputs/TimeDist");
  TimeDist_stream << TimeDist;
  std::cout << "TimeDist values: "<< TimeDist << std::endl;
  TimeDist_stream.close();
  IntegerVector Nu(1);
  Nu[0]  = RcppDeepState_int();
  std::string Nu_t = "/home/akhila/fuzzer_packages/fuzzedpackages/womblR/inst/testfiles/SIGMA/libFuzzer_SIGMA/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Nu.qs";
  qs::c_qsave(Nu,Nu_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Nu values: "<< Nu << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    SIGMA(Phi[0],TempCorInd[0],TimeDist,Nu[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
