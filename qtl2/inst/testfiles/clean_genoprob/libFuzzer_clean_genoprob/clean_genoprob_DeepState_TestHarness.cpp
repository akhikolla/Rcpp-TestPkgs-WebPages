// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// clean_genoprob_DeepState_TestHarness_generation.cpp and clean_genoprob_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector clean_genoprob(const NumericVector& prob_array, double value_threshold, double column_threshold);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector prob_array  = RcppDeepState_NumericVector();
  std::string prob_array_t = "/home/akhila/fuzzer_packages/fuzzedpackages/qtl2/inst/testfiles/clean_genoprob/libFuzzer_clean_genoprob/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_prob_array.qs";
  qs::c_qsave(prob_array,prob_array_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "prob_array values: "<< prob_array << std::endl;
  NumericVector value_threshold(1);
  value_threshold[0]  = RcppDeepState_double();
  std::string value_threshold_t = "/home/akhila/fuzzer_packages/fuzzedpackages/qtl2/inst/testfiles/clean_genoprob/libFuzzer_clean_genoprob/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_value_threshold.qs";
  qs::c_qsave(value_threshold,value_threshold_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "value_threshold values: "<< value_threshold << std::endl;
  NumericVector column_threshold(1);
  column_threshold[0]  = RcppDeepState_double();
  std::string column_threshold_t = "/home/akhila/fuzzer_packages/fuzzedpackages/qtl2/inst/testfiles/clean_genoprob/libFuzzer_clean_genoprob/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_column_threshold.qs";
  qs::c_qsave(column_threshold,column_threshold_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "column_threshold values: "<< column_threshold << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    clean_genoprob(prob_array,value_threshold[0],column_threshold[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
