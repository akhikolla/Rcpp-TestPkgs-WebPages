// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// maxmarg_DeepState_TestHarness_generation.cpp and maxmarg_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

IntegerMatrix maxmarg(const NumericVector& prob_array, const double minprob, const double tol);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector prob_array  = RcppDeepState_NumericVector();
  std::string prob_array_t = "/home/akhila/fuzzer_packages/fuzzedpackages/qtl2/inst/testfiles/maxmarg/libFuzzer_maxmarg/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_prob_array.qs";
  qs::c_qsave(prob_array,prob_array_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "prob_array values: "<< prob_array << std::endl;
  NumericVector minprob(1);
  minprob[0]  = RcppDeepState_double();
  std::string minprob_t = "/home/akhila/fuzzer_packages/fuzzedpackages/qtl2/inst/testfiles/maxmarg/libFuzzer_maxmarg/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_minprob.qs";
  qs::c_qsave(minprob,minprob_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "minprob values: "<< minprob << std::endl;
  NumericVector tol(1);
  tol[0]  = RcppDeepState_double();
  std::string tol_t = "/home/akhila/fuzzer_packages/fuzzedpackages/qtl2/inst/testfiles/maxmarg/libFuzzer_maxmarg/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_tol.qs";
  qs::c_qsave(tol,tol_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tol values: "<< tol << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    maxmarg(prob_array,minprob[0],tol[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
