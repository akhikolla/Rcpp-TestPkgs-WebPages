// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// hft_algorithm_DeepState_TestHarness_generation.cpp and hft_algorithm_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List hft_algorithm(arma::mat Sigma, arma::mat adj, double tol, double max_iter);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  std::ofstream Sigma_stream;
  arma::mat Sigma  = RcppDeepState_mat();
  Sigma_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/BGGM/inst/testfiles/hft_algorithm/inputs/Sigma");
  Sigma_stream << Sigma;
  std::cout << "Sigma values: "<< Sigma << std::endl;
  Sigma_stream.close();
  std::ofstream adj_stream;
  arma::mat adj  = RcppDeepState_mat();
  adj_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/BGGM/inst/testfiles/hft_algorithm/inputs/adj");
  adj_stream << adj;
  std::cout << "adj values: "<< adj << std::endl;
  adj_stream.close();
  NumericVector tol(1);
  tol[0]  = RcppDeepState_double();
  qs::c_qsave(tol,"/home/akhila/fuzzer_packages/fuzzedpackages/BGGM/inst/testfiles/hft_algorithm/inputs/tol.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tol values: "<< tol << std::endl;
  NumericVector max_iter(1);
  max_iter[0]  = RcppDeepState_double();
  qs::c_qsave(max_iter,"/home/akhila/fuzzer_packages/fuzzedpackages/BGGM/inst/testfiles/hft_algorithm/inputs/max_iter.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "max_iter values: "<< max_iter << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    hft_algorithm(Sigma,adj,tol[0],max_iter[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
