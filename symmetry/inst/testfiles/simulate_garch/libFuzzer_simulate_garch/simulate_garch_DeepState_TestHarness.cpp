// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// simulate_garch_DeepState_TestHarness_generation.cpp and simulate_garch_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector simulate_garch(const NumericVector& resid, const NumericVector& y, const NumericVector& cfit, double omega, const NumericVector& alpha, const NumericVector& beta);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector resid  = RcppDeepState_NumericVector();
  std::string resid_t = "/home/akhila/fuzzer_packages/fuzzedpackages/symmetry/inst/testfiles/simulate_garch/libFuzzer_simulate_garch/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_resid.qs";
  qs::c_qsave(resid,resid_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "resid values: "<< resid << std::endl;
  NumericVector y  = RcppDeepState_NumericVector();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/symmetry/inst/testfiles/simulate_garch/libFuzzer_simulate_garch/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y.qs";
  qs::c_qsave(y,y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericVector cfit  = RcppDeepState_NumericVector();
  std::string cfit_t = "/home/akhila/fuzzer_packages/fuzzedpackages/symmetry/inst/testfiles/simulate_garch/libFuzzer_simulate_garch/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_cfit.qs";
  qs::c_qsave(cfit,cfit_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "cfit values: "<< cfit << std::endl;
  NumericVector omega(1);
  omega[0]  = RcppDeepState_double();
  std::string omega_t = "/home/akhila/fuzzer_packages/fuzzedpackages/symmetry/inst/testfiles/simulate_garch/libFuzzer_simulate_garch/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_omega.qs";
  qs::c_qsave(omega,omega_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "omega values: "<< omega << std::endl;
  NumericVector alpha  = RcppDeepState_NumericVector();
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/symmetry/inst/testfiles/simulate_garch/libFuzzer_simulate_garch/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_alpha.qs";
  qs::c_qsave(alpha,alpha_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  NumericVector beta  = RcppDeepState_NumericVector();
  std::string beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/symmetry/inst/testfiles/simulate_garch/libFuzzer_simulate_garch/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_beta.qs";
  qs::c_qsave(beta,beta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "beta values: "<< beta << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    simulate_garch(resid,y,cfit,omega[0],alpha,beta);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
