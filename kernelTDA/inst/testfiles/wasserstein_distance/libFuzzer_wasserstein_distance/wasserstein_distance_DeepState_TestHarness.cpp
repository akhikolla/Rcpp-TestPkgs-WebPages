// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// wasserstein_distance_DeepState_TestHarness_generation.cpp and wasserstein_distance_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double wasserstein_distance(const Rcpp::NumericMatrix& Diag1, const Rcpp::NumericMatrix& Diag2, int q, double internal_p, double delta, double initial_eps, double eps_factor);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix Diag1  = RcppDeepState_NumericMatrix();
  std::string Diag1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kernelTDA/inst/testfiles/wasserstein_distance/libFuzzer_wasserstein_distance/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Diag1.qs";
  qs::c_qsave(Diag1,Diag1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Diag1 values: "<< Diag1 << std::endl;
  NumericMatrix Diag2  = RcppDeepState_NumericMatrix();
  std::string Diag2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kernelTDA/inst/testfiles/wasserstein_distance/libFuzzer_wasserstein_distance/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Diag2.qs";
  qs::c_qsave(Diag2,Diag2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Diag2 values: "<< Diag2 << std::endl;
  IntegerVector q(1);
  q[0]  = RcppDeepState_int();
  std::string q_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kernelTDA/inst/testfiles/wasserstein_distance/libFuzzer_wasserstein_distance/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_q.qs";
  qs::c_qsave(q,q_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "q values: "<< q << std::endl;
  NumericVector internal_p(1);
  internal_p[0]  = RcppDeepState_double();
  std::string internal_p_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kernelTDA/inst/testfiles/wasserstein_distance/libFuzzer_wasserstein_distance/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_internal_p.qs";
  qs::c_qsave(internal_p,internal_p_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "internal_p values: "<< internal_p << std::endl;
  NumericVector delta(1);
  delta[0]  = RcppDeepState_double();
  std::string delta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kernelTDA/inst/testfiles/wasserstein_distance/libFuzzer_wasserstein_distance/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_delta.qs";
  qs::c_qsave(delta,delta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "delta values: "<< delta << std::endl;
  NumericVector initial_eps(1);
  initial_eps[0]  = RcppDeepState_double();
  std::string initial_eps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kernelTDA/inst/testfiles/wasserstein_distance/libFuzzer_wasserstein_distance/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_initial_eps.qs";
  qs::c_qsave(initial_eps,initial_eps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "initial_eps values: "<< initial_eps << std::endl;
  NumericVector eps_factor(1);
  eps_factor[0]  = RcppDeepState_double();
  std::string eps_factor_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kernelTDA/inst/testfiles/wasserstein_distance/libFuzzer_wasserstein_distance/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_eps_factor.qs";
  qs::c_qsave(eps_factor,eps_factor_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "eps_factor values: "<< eps_factor << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    wasserstein_distance(Diag1,Diag2,q[0],internal_p[0],delta[0],initial_eps[0],eps_factor[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
