// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// cspnn_predict_cpp_DeepState_TestHarness_generation.cpp and cspnn_predict_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

arma::mat cspnn_predict_cpp(arma::mat& xr, arma::mat& newData, arma::mat& sigmaInverse);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  std::ofstream xr_stream;
  arma::mat xr  = RcppDeepState_mat();
  xr_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/spnn/inst/testfiles/cspnn_predict_cpp/inputs/xr");
  xr_stream << xr;
  std::cout << "xr values: "<< xr << std::endl;
  xr_stream.close();
  std::ofstream newData_stream;
  arma::mat newData  = RcppDeepState_mat();
  newData_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/spnn/inst/testfiles/cspnn_predict_cpp/inputs/newData");
  newData_stream << newData;
  std::cout << "newData values: "<< newData << std::endl;
  newData_stream.close();
  std::ofstream sigmaInverse_stream;
  arma::mat sigmaInverse  = RcppDeepState_mat();
  sigmaInverse_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/spnn/inst/testfiles/cspnn_predict_cpp/inputs/sigmaInverse");
  sigmaInverse_stream << sigmaInverse;
  std::cout << "sigmaInverse values: "<< sigmaInverse << std::endl;
  sigmaInverse_stream.close();
  std::cout << "input ends" << std::endl;
  try{
    cspnn_predict_cpp(xr,newData,sigmaInverse);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
