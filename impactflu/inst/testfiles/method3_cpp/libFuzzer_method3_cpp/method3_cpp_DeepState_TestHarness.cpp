// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// method3_cpp_DeepState_TestHarness_generation.cpp and method3_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

DataFrame method3_cpp(const int init_pop_size, const IntegerVector& vaccinations, const IntegerVector& cases, const NumericVector& ve);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector init_pop_size(1);
  init_pop_size[0]  = RcppDeepState_int();
  std::string init_pop_size_t = "/home/akhila/fuzzer_packages/fuzzedpackages/impactflu/inst/testfiles/method3_cpp/libFuzzer_method3_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_init_pop_size.qs";
  qs::c_qsave(init_pop_size,init_pop_size_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "init_pop_size values: "<< init_pop_size << std::endl;
  IntegerVector vaccinations  = RcppDeepState_IntegerVector();
  std::string vaccinations_t = "/home/akhila/fuzzer_packages/fuzzedpackages/impactflu/inst/testfiles/method3_cpp/libFuzzer_method3_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_vaccinations.qs";
  qs::c_qsave(vaccinations,vaccinations_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "vaccinations values: "<< vaccinations << std::endl;
  IntegerVector cases  = RcppDeepState_IntegerVector();
  std::string cases_t = "/home/akhila/fuzzer_packages/fuzzedpackages/impactflu/inst/testfiles/method3_cpp/libFuzzer_method3_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_cases.qs";
  qs::c_qsave(cases,cases_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "cases values: "<< cases << std::endl;
  NumericVector ve  = RcppDeepState_NumericVector();
  std::string ve_t = "/home/akhila/fuzzer_packages/fuzzedpackages/impactflu/inst/testfiles/method3_cpp/libFuzzer_method3_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ve.qs";
  qs::c_qsave(ve,ve_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ve values: "<< ve << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    method3_cpp(init_pop_size[0],vaccinations,cases,ve);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
