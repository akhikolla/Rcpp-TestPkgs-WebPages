// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// fastKronEye_Y_DeepState_TestHarness_generation.cpp and fastKronEye_Y_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

arma::vec fastKronEye_Y(arma::mat const& Sigma, arma::mat const& Y, int const& n, int const& J);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  std::ofstream Sigma_stream;
  arma::mat Sigma  = RcppDeepState_mat();
  Sigma_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/surbayes/inst/testfiles/fastKronEye_Y/inputs/Sigma");
  Sigma_stream << Sigma;
  std::cout << "Sigma values: "<< Sigma << std::endl;
  Sigma_stream.close();
  std::ofstream Y_stream;
  arma::mat Y  = RcppDeepState_mat();
  Y_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/surbayes/inst/testfiles/fastKronEye_Y/inputs/Y");
  Y_stream << Y;
  std::cout << "Y values: "<< Y << std::endl;
  Y_stream.close();
  IntegerVector n(1);
  n[0]  = RcppDeepState_int();
  qs::c_qsave(n,"/home/akhila/fuzzer_packages/fuzzedpackages/surbayes/inst/testfiles/fastKronEye_Y/inputs/n.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  IntegerVector J(1);
  J[0]  = RcppDeepState_int();
  qs::c_qsave(J,"/home/akhila/fuzzer_packages/fuzzedpackages/surbayes/inst/testfiles/fastKronEye_Y/inputs/J.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "J values: "<< J << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    fastKronEye_Y(Sigma,Y,n[0],J[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
