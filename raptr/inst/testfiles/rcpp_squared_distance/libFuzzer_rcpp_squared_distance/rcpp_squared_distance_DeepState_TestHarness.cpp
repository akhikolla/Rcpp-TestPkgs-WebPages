// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rcpp_squared_distance_DeepState_TestHarness_generation.cpp and rcpp_squared_distance_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

std::vector<double> rcpp_squared_distance(Rcpp::NumericMatrix x, Rcpp::NumericMatrix y, Rcpp::NumericVector y_weights);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix x  = RcppDeepState_NumericMatrix();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/raptr/inst/testfiles/rcpp_squared_distance/libFuzzer_rcpp_squared_distance/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericMatrix y  = RcppDeepState_NumericMatrix();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/raptr/inst/testfiles/rcpp_squared_distance/libFuzzer_rcpp_squared_distance/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y.qs";
  qs::c_qsave(y,y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericVector y_weights  = RcppDeepState_NumericVector();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/raptr/inst/testfiles/rcpp_squared_distance/libFuzzer_rcpp_squared_distance/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y.qs";
  std::string y_weights_t = "/home/akhila/fuzzer_packages/fuzzedpackages/raptr/inst/testfiles/rcpp_squared_distance/libFuzzer_rcpp_squared_distance/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y_weights.qs";
  qs::c_qsave(y_weights,y_weights_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y_weights values: "<< y_weights << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rcpp_squared_distance(x,y,y_weights);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
