// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// hill_climb_step_cpp_DeepState_TestHarness_generation.cpp and hill_climb_step_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix hill_climb_step_cpp(NumericMatrix mtx, int R);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix mtx  = RcppDeepState_NumericMatrix();
  std::string mtx_t = "/home/akhila/fuzzer_packages/fuzzedpackages/maxnodf/inst/testfiles/hill_climb_step_cpp/libFuzzer_hill_climb_step_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_mtx.qs";
  qs::c_qsave(mtx,mtx_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mtx values: "<< mtx << std::endl;
  IntegerVector R(1);
  R[0]  = RcppDeepState_int();
  std::string R_t = "/home/akhila/fuzzer_packages/fuzzedpackages/maxnodf/inst/testfiles/hill_climb_step_cpp/libFuzzer_hill_climb_step_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_R.qs";
  qs::c_qsave(R,R_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "R values: "<< R << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    hill_climb_step_cpp(mtx,R[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
