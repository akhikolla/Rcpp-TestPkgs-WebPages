// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// sim_anneal_opt_cpp_DeepState_TestHarness_generation.cpp and sim_anneal_opt_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix sim_anneal_opt_cpp(NumericMatrix mtx, double alpha, int iters, double init_temp, double min_temp);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix mtx  = RcppDeepState_NumericMatrix();
  qs::c_qsave(mtx,"/home/akhila/fuzzer_packages/fuzzedpackages/maxnodf/inst/testfiles/sim_anneal_opt_cpp/inputs/mtx.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mtx values: "<< mtx << std::endl;
  NumericVector alpha(1);
  alpha[0]  = RcppDeepState_double();
  qs::c_qsave(alpha,"/home/akhila/fuzzer_packages/fuzzedpackages/maxnodf/inst/testfiles/sim_anneal_opt_cpp/inputs/alpha.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  IntegerVector iters(1);
  iters[0]  = RcppDeepState_int();
  qs::c_qsave(iters,"/home/akhila/fuzzer_packages/fuzzedpackages/maxnodf/inst/testfiles/sim_anneal_opt_cpp/inputs/iters.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "iters values: "<< iters << std::endl;
  NumericVector init_temp(1);
  init_temp[0]  = RcppDeepState_double();
  qs::c_qsave(init_temp,"/home/akhila/fuzzer_packages/fuzzedpackages/maxnodf/inst/testfiles/sim_anneal_opt_cpp/inputs/init_temp.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "init_temp values: "<< init_temp << std::endl;
  NumericVector min_temp(1);
  min_temp[0]  = RcppDeepState_double();
  qs::c_qsave(min_temp,"/home/akhila/fuzzer_packages/fuzzedpackages/maxnodf/inst/testfiles/sim_anneal_opt_cpp/inputs/min_temp.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "min_temp values: "<< min_temp << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    sim_anneal_opt_cpp(mtx,alpha[0],iters[0],init_temp[0],min_temp[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
