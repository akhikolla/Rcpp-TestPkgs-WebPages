// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// inv_hfunc_DeepState_TestHarness_generation.cpp and inv_hfunc_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::NumericVector inv_hfunc(const Rcpp::NumericMatrix& uev, const int& cond_var, const Rcpp::NumericMatrix& vals, const Rcpp::NumericVector& grid);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix uev  = RcppDeepState_NumericMatrix();
  std::string uev_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kdecopula/inst/testfiles/inv_hfunc/libFuzzer_inv_hfunc/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_uev.qs";
  qs::c_qsave(uev,uev_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "uev values: "<< uev << std::endl;
  IntegerVector cond_var(1);
  cond_var[0]  = RcppDeepState_int();
  std::string cond_var_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kdecopula/inst/testfiles/inv_hfunc/libFuzzer_inv_hfunc/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_cond_var.qs";
  qs::c_qsave(cond_var,cond_var_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "cond_var values: "<< cond_var << std::endl;
  NumericMatrix vals  = RcppDeepState_NumericMatrix();
  std::string vals_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kdecopula/inst/testfiles/inv_hfunc/libFuzzer_inv_hfunc/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_vals.qs";
  qs::c_qsave(vals,vals_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "vals values: "<< vals << std::endl;
  NumericVector grid  = RcppDeepState_NumericVector();
  std::string grid_t = "/home/akhila/fuzzer_packages/fuzzedpackages/kdecopula/inst/testfiles/inv_hfunc/libFuzzer_inv_hfunc/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_grid.qs";
  qs::c_qsave(grid,grid_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "grid values: "<< grid << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    inv_hfunc(uev,cond_var[0],vals,grid);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
