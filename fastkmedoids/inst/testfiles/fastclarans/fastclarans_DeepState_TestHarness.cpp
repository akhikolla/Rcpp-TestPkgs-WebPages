// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// fastclarans_DeepState_TestHarness_generation.cpp and fastclarans_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

S4 fastclarans(NumericVector rdist, int n, int k, int numlocal, double maxneighbor, int seed);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector rdist  = RcppDeepState_NumericVector();
  qs::c_qsave(rdist,"/home/akhila/fuzzer_packages/fuzzedpackages/fastkmedoids/inst/testfiles/fastclarans/inputs/rdist.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rdist values: "<< rdist << std::endl;
  IntegerVector n(1);
  n[0]  = RcppDeepState_int();
  qs::c_qsave(n,"/home/akhila/fuzzer_packages/fuzzedpackages/fastkmedoids/inst/testfiles/fastclarans/inputs/n.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  IntegerVector k(1);
  k[0]  = RcppDeepState_int();
  qs::c_qsave(k,"/home/akhila/fuzzer_packages/fuzzedpackages/fastkmedoids/inst/testfiles/fastclarans/inputs/k.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "k values: "<< k << std::endl;
  IntegerVector numlocal(1);
  numlocal[0]  = RcppDeepState_int();
  qs::c_qsave(numlocal,"/home/akhila/fuzzer_packages/fuzzedpackages/fastkmedoids/inst/testfiles/fastclarans/inputs/numlocal.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "numlocal values: "<< numlocal << std::endl;
  NumericVector maxneighbor(1);
  maxneighbor[0]  = RcppDeepState_double();
  qs::c_qsave(maxneighbor,"/home/akhila/fuzzer_packages/fuzzedpackages/fastkmedoids/inst/testfiles/fastclarans/inputs/maxneighbor.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxneighbor values: "<< maxneighbor << std::endl;
  IntegerVector seed(1);
  seed[0]  = RcppDeepState_int();
  qs::c_qsave(seed,"/home/akhila/fuzzer_packages/fuzzedpackages/fastkmedoids/inst/testfiles/fastclarans/inputs/seed.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "seed values: "<< seed << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    fastclarans(rdist,n[0],k[0],numlocal[0],maxneighbor[0],seed[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
