// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// updateDistancesWithCombinations_DeepState_TestHarness_generation.cpp and updateDistancesWithCombinations_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

void updateDistancesWithCombinations(NumericVector& length_root_distances, NumericVector& topological_root_distances, IntegerVector& left_partition, IntegerVector& right_partition, IntegerVector& index_offsets, double distance_to_root, int edges_to_root);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector length_root_distances  = RcppDeepState_NumericVector();
  qs::c_qsave(length_root_distances,"/home/akhila/fuzzer_packages/fuzzedpackages/treespace/inst/testfiles/updateDistancesWithCombinations/inputs/length_root_distances.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "length_root_distances values: "<< length_root_distances << std::endl;
  NumericVector topological_root_distances  = RcppDeepState_NumericVector();
  qs::c_qsave(topological_root_distances,"/home/akhila/fuzzer_packages/fuzzedpackages/treespace/inst/testfiles/updateDistancesWithCombinations/inputs/topological_root_distances.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "topological_root_distances values: "<< topological_root_distances << std::endl;
  IntegerVector left_partition  = RcppDeepState_IntegerVector();
  qs::c_qsave(left_partition,"/home/akhila/fuzzer_packages/fuzzedpackages/treespace/inst/testfiles/updateDistancesWithCombinations/inputs/left_partition.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "left_partition values: "<< left_partition << std::endl;
  IntegerVector right_partition  = RcppDeepState_IntegerVector();
  qs::c_qsave(right_partition,"/home/akhila/fuzzer_packages/fuzzedpackages/treespace/inst/testfiles/updateDistancesWithCombinations/inputs/right_partition.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "right_partition values: "<< right_partition << std::endl;
  IntegerVector index_offsets  = RcppDeepState_IntegerVector();
  qs::c_qsave(index_offsets,"/home/akhila/fuzzer_packages/fuzzedpackages/treespace/inst/testfiles/updateDistancesWithCombinations/inputs/index_offsets.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "index_offsets values: "<< index_offsets << std::endl;
  NumericVector distance_to_root(1);
  distance_to_root[0]  = RcppDeepState_double();
  qs::c_qsave(distance_to_root,"/home/akhila/fuzzer_packages/fuzzedpackages/treespace/inst/testfiles/updateDistancesWithCombinations/inputs/distance_to_root.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "distance_to_root values: "<< distance_to_root << std::endl;
  IntegerVector edges_to_root(1);
  edges_to_root[0]  = RcppDeepState_int();
  qs::c_qsave(edges_to_root,"/home/akhila/fuzzer_packages/fuzzedpackages/treespace/inst/testfiles/updateDistancesWithCombinations/inputs/edges_to_root.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "edges_to_root values: "<< edges_to_root << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    updateDistancesWithCombinations(length_root_distances,topological_root_distances,left_partition,right_partition,index_offsets,distance_to_root[0],edges_to_root[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
