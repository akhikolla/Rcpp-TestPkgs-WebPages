// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// sttcp_ab_DeepState_TestHarness_generation.cpp and sttcp_ab_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector sttcp_ab(NumericVector a, NumericVector b, double start, double end, double dt, double tau_sep, double tau_max);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector a  = RcppDeepState_NumericVector();
  std::string a_t = "/home/akhila/fuzzer_packages/fuzzedpackages/meaRtools/inst/testfiles/sttcp_ab/libFuzzer_sttcp_ab/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_a.qs";
  qs::c_qsave(a,a_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "a values: "<< a << std::endl;
  NumericVector b  = RcppDeepState_NumericVector();
  std::string b_t = "/home/akhila/fuzzer_packages/fuzzedpackages/meaRtools/inst/testfiles/sttcp_ab/libFuzzer_sttcp_ab/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_b.qs";
  qs::c_qsave(b,b_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "b values: "<< b << std::endl;
  NumericVector start(1);
  start[0]  = RcppDeepState_double();
  std::string start_t = "/home/akhila/fuzzer_packages/fuzzedpackages/meaRtools/inst/testfiles/sttcp_ab/libFuzzer_sttcp_ab/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_start.qs";
  qs::c_qsave(start,start_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "start values: "<< start << std::endl;
  NumericVector end(1);
  end[0]  = RcppDeepState_double();
  std::string end_t = "/home/akhila/fuzzer_packages/fuzzedpackages/meaRtools/inst/testfiles/sttcp_ab/libFuzzer_sttcp_ab/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_end.qs";
  qs::c_qsave(end,end_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "end values: "<< end << std::endl;
  NumericVector dt(1);
  dt[0]  = RcppDeepState_double();
  std::string dt_t = "/home/akhila/fuzzer_packages/fuzzedpackages/meaRtools/inst/testfiles/sttcp_ab/libFuzzer_sttcp_ab/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dt.qs";
  qs::c_qsave(dt,dt_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dt values: "<< dt << std::endl;
  NumericVector tau_sep(1);
  tau_sep[0]  = RcppDeepState_double();
  std::string tau_sep_t = "/home/akhila/fuzzer_packages/fuzzedpackages/meaRtools/inst/testfiles/sttcp_ab/libFuzzer_sttcp_ab/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_tau_sep.qs";
  qs::c_qsave(tau_sep,tau_sep_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tau_sep values: "<< tau_sep << std::endl;
  NumericVector tau_max(1);
  tau_max[0]  = RcppDeepState_double();
  std::string tau_max_t = "/home/akhila/fuzzer_packages/fuzzedpackages/meaRtools/inst/testfiles/sttcp_ab/libFuzzer_sttcp_ab/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_tau_max.qs";
  qs::c_qsave(tau_max,tau_max_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tau_max values: "<< tau_max << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    sttcp_ab(a,b,start[0],end[0],dt[0],tau_sep[0],tau_max[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
