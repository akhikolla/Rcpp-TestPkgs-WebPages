// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// surv_est_DeepState_TestHarness_generation.cpp and surv_est_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector surv_est(NumericVector times, NumericVector probs, NumericVector newtimes);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector times  = RcppDeepState_NumericVector();
  std::string times_t = "/home/akhila/fuzzer_packages/fuzzedpackages/obliqueRSF/inst/testfiles/surv_est/libFuzzer_surv_est/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_times.qs";
  qs::c_qsave(times,times_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "times values: "<< times << std::endl;
  NumericVector probs  = RcppDeepState_NumericVector();
  std::string probs_t = "/home/akhila/fuzzer_packages/fuzzedpackages/obliqueRSF/inst/testfiles/surv_est/libFuzzer_surv_est/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_probs.qs";
  qs::c_qsave(probs,probs_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "probs values: "<< probs << std::endl;
  NumericVector newtimes  = RcppDeepState_NumericVector();
  std::string newtimes_t = "/home/akhila/fuzzer_packages/fuzzedpackages/obliqueRSF/inst/testfiles/surv_est/libFuzzer_surv_est/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_newtimes.qs";
  qs::c_qsave(newtimes,newtimes_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "newtimes values: "<< newtimes << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    surv_est(times,probs,newtimes);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
