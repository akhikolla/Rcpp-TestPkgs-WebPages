// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// unislicemESCD_DeepState_TestHarness_generation.cpp and unislicemESCD_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector unislicemESCD(NumericVector x1, double lx, IntegerVector Lm, NumericVector mu0, NumericVector hpriorpar, double w, int m, NumericVector lo, NumericVector up, IntegerVector samind);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector x1  = RcppDeepState_NumericVector();
  qs::c_qsave(x1,"/home/akhila/fuzzer_packages/fuzzedpackages/microclustr/inst/testfiles/unislicemESCD/inputs/x1.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x1 values: "<< x1 << std::endl;
  NumericVector lx(1);
  lx[0]  = RcppDeepState_double();
  qs::c_qsave(lx,"/home/akhila/fuzzer_packages/fuzzedpackages/microclustr/inst/testfiles/unislicemESCD/inputs/lx.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lx values: "<< lx << std::endl;
  IntegerVector Lm  = RcppDeepState_IntegerVector();
  qs::c_qsave(Lm,"/home/akhila/fuzzer_packages/fuzzedpackages/microclustr/inst/testfiles/unislicemESCD/inputs/Lm.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Lm values: "<< Lm << std::endl;
  NumericVector mu0  = RcppDeepState_NumericVector();
  qs::c_qsave(mu0,"/home/akhila/fuzzer_packages/fuzzedpackages/microclustr/inst/testfiles/unislicemESCD/inputs/mu0.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu0 values: "<< mu0 << std::endl;
  NumericVector hpriorpar  = RcppDeepState_NumericVector();
  qs::c_qsave(hpriorpar,"/home/akhila/fuzzer_packages/fuzzedpackages/microclustr/inst/testfiles/unislicemESCD/inputs/hpriorpar.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "hpriorpar values: "<< hpriorpar << std::endl;
  NumericVector w(1);
  w[0]  = RcppDeepState_double();
  qs::c_qsave(w,"/home/akhila/fuzzer_packages/fuzzedpackages/microclustr/inst/testfiles/unislicemESCD/inputs/w.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "w values: "<< w << std::endl;
  IntegerVector m(1);
  m[0]  = RcppDeepState_int();
  qs::c_qsave(m,"/home/akhila/fuzzer_packages/fuzzedpackages/microclustr/inst/testfiles/unislicemESCD/inputs/m.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "m values: "<< m << std::endl;
  NumericVector lo  = RcppDeepState_NumericVector();
  qs::c_qsave(lo,"/home/akhila/fuzzer_packages/fuzzedpackages/microclustr/inst/testfiles/unislicemESCD/inputs/lo.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lo values: "<< lo << std::endl;
  NumericVector up  = RcppDeepState_NumericVector();
  qs::c_qsave(up,"/home/akhila/fuzzer_packages/fuzzedpackages/microclustr/inst/testfiles/unislicemESCD/inputs/up.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "up values: "<< up << std::endl;
  IntegerVector samind  = RcppDeepState_IntegerVector();
  qs::c_qsave(samind,"/home/akhila/fuzzer_packages/fuzzedpackages/microclustr/inst/testfiles/unislicemESCD/inputs/samind.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "samind values: "<< samind << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    unislicemESCD(x1,lx[0],Lm,mu0,hpriorpar,w[0],m[0],lo,up,samind);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
