// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rls_gsadf_DeepState_TestHarness_generation.cpp and rls_gsadf_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

arma::vec rls_gsadf(const arma::mat& yxmat, int min_win, int lag);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  std::ofstream yxmat_stream;
  arma::mat yxmat  = RcppDeepState_mat();
  yxmat_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/exuber/inst/testfiles/rls_gsadf/inputs/yxmat");
  yxmat_stream << yxmat;
  std::cout << "yxmat values: "<< yxmat << std::endl;
  yxmat_stream.close();
  IntegerVector min_win(1);
  min_win[0]  = RcppDeepState_int();
  std::string min_win_t = "/home/akhila/fuzzer_packages/fuzzedpackages/exuber/inst/testfiles/rls_gsadf/libFuzzer_rls_gsadf/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_min_win.qs";
  qs::c_qsave(min_win,min_win_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "min_win values: "<< min_win << std::endl;
  IntegerVector lag(1);
  lag[0]  = RcppDeepState_int();
  std::string lag_t = "/home/akhila/fuzzer_packages/fuzzedpackages/exuber/inst/testfiles/rls_gsadf/libFuzzer_rls_gsadf/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lag.qs";
  qs::c_qsave(lag,lag_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lag values: "<< lag << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rls_gsadf(yxmat,min_win[0],lag[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
