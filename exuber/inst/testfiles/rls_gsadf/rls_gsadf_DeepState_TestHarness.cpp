// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rls_gsadf_DeepState_TestHarness_generation.cpp and rls_gsadf_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

arma::vec rls_gsadf(const arma::mat& yxmat, int min_win, int lag);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  std::ofstream yxmat_stream;
  arma::mat yxmat  = RcppDeepState_mat();
  yxmat_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/exuber/inst/testfiles/rls_gsadf/inputs/yxmat");
  yxmat_stream << yxmat;
  std::cout << "yxmat values: "<< yxmat << std::endl;
  yxmat_stream.close();
  IntegerVector min_win(1);
  min_win[0]  = RcppDeepState_int();
  qs::c_qsave(min_win,"/home/akhila/fuzzer_packages/fuzzedpackages/exuber/inst/testfiles/rls_gsadf/inputs/min_win.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "min_win values: "<< min_win << std::endl;
  IntegerVector lag(1);
  lag[0]  = RcppDeepState_int();
  qs::c_qsave(lag,"/home/akhila/fuzzer_packages/fuzzedpackages/exuber/inst/testfiles/rls_gsadf/inputs/lag.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lag values: "<< lag << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rls_gsadf(yxmat,min_win[0],lag[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
