// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// tplsum_DeepState_TestHarness_generation.cpp and tplsum_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector tplsum(double expo, double rate, IntegerVector xs, int xmin);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector expo(1);
  expo[0]  = RcppDeepState_double();
  std::string expo_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spatialwarnings/inst/testfiles/tplsum/libFuzzer_tplsum/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_expo.qs";
  qs::c_qsave(expo,expo_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "expo values: "<< expo << std::endl;
  NumericVector rate(1);
  rate[0]  = RcppDeepState_double();
  std::string rate_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spatialwarnings/inst/testfiles/tplsum/libFuzzer_tplsum/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_rate.qs";
  qs::c_qsave(rate,rate_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rate values: "<< rate << std::endl;
  IntegerVector xs  = RcppDeepState_IntegerVector();
  std::string xs_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spatialwarnings/inst/testfiles/tplsum/libFuzzer_tplsum/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_xs.qs";
  qs::c_qsave(xs,xs_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "xs values: "<< xs << std::endl;
  IntegerVector xmin(1);
  xmin[0]  = RcppDeepState_int();
  std::string xmin_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spatialwarnings/inst/testfiles/tplsum/libFuzzer_tplsum/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_xmin.qs";
  qs::c_qsave(xmin,xmin_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "xmin values: "<< xmin << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    tplsum(expo[0],rate[0],xs,xmin[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
