// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// truncatedSamplingSubiterationBinomialY_DeepState_TestHarness_generation.cpp and truncatedSamplingSubiterationBinomialY_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double truncatedSamplingSubiterationBinomialY(double uniformSample, double theta, double betaMinusOne);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector uniformSample(1);
  uniformSample[0]  = RcppDeepState_double();
  std::string uniformSample_t = "/home/akhila/fuzzer_packages/fuzzedpackages/multibridge/inst/testfiles/truncatedSamplingSubiterationBinomialY/libFuzzer_truncatedSamplingSubiterationBinomialY/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_uniformSample.qs";
  qs::c_qsave(uniformSample,uniformSample_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "uniformSample values: "<< uniformSample << std::endl;
  NumericVector theta(1);
  theta[0]  = RcppDeepState_double();
  std::string theta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/multibridge/inst/testfiles/truncatedSamplingSubiterationBinomialY/libFuzzer_truncatedSamplingSubiterationBinomialY/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_theta.qs";
  qs::c_qsave(theta,theta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta values: "<< theta << std::endl;
  NumericVector betaMinusOne(1);
  betaMinusOne[0]  = RcppDeepState_double();
  std::string betaMinusOne_t = "/home/akhila/fuzzer_packages/fuzzedpackages/multibridge/inst/testfiles/truncatedSamplingSubiterationBinomialY/libFuzzer_truncatedSamplingSubiterationBinomialY/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_betaMinusOne.qs";
  qs::c_qsave(betaMinusOne,betaMinusOne_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "betaMinusOne values: "<< betaMinusOne << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    truncatedSamplingSubiterationBinomialY(uniformSample[0],theta[0],betaMinusOne[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
