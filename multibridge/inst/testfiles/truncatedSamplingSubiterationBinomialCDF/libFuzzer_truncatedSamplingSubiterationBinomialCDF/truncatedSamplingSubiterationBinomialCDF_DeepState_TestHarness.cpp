// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// truncatedSamplingSubiterationBinomialCDF_DeepState_TestHarness_generation.cpp and truncatedSamplingSubiterationBinomialCDF_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double truncatedSamplingSubiterationBinomialCDF(double uniformSample, double alpha, double Lo, double Hi);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector uniformSample(1);
  uniformSample[0]  = RcppDeepState_double();
  std::string uniformSample_t = "/home/akhila/fuzzer_packages/fuzzedpackages/multibridge/inst/testfiles/truncatedSamplingSubiterationBinomialCDF/libFuzzer_truncatedSamplingSubiterationBinomialCDF/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_uniformSample.qs";
  qs::c_qsave(uniformSample,uniformSample_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "uniformSample values: "<< uniformSample << std::endl;
  NumericVector alpha(1);
  alpha[0]  = RcppDeepState_double();
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/multibridge/inst/testfiles/truncatedSamplingSubiterationBinomialCDF/libFuzzer_truncatedSamplingSubiterationBinomialCDF/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_alpha.qs";
  qs::c_qsave(alpha,alpha_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  NumericVector Lo(1);
  Lo[0]  = RcppDeepState_double();
  std::string Lo_t = "/home/akhila/fuzzer_packages/fuzzedpackages/multibridge/inst/testfiles/truncatedSamplingSubiterationBinomialCDF/libFuzzer_truncatedSamplingSubiterationBinomialCDF/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Lo.qs";
  qs::c_qsave(Lo,Lo_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Lo values: "<< Lo << std::endl;
  NumericVector Hi(1);
  Hi[0]  = RcppDeepState_double();
  std::string Hi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/multibridge/inst/testfiles/truncatedSamplingSubiterationBinomialCDF/libFuzzer_truncatedSamplingSubiterationBinomialCDF/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Hi.qs";
  qs::c_qsave(Hi,Hi_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Hi values: "<< Hi << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    truncatedSamplingSubiterationBinomialCDF(uniformSample[0],alpha[0],Lo[0],Hi[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
