// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// is_inside_DeepState_TestHarness_generation.cpp and is_inside_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

bool is_inside(double sizehex, double positionx, double positiony, double sinval, double cosval);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector sizehex(1);
  sizehex[0]  = RcppDeepState_double();
  qs::c_qsave(sizehex,"/home/akhila/fuzzer_packages/fuzzedpackages/rayshader/inst/testfiles/is_inside/inputs/sizehex.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sizehex values: "<< sizehex << std::endl;
  NumericVector positionx(1);
  positionx[0]  = RcppDeepState_double();
  qs::c_qsave(positionx,"/home/akhila/fuzzer_packages/fuzzedpackages/rayshader/inst/testfiles/is_inside/inputs/positionx.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "positionx values: "<< positionx << std::endl;
  NumericVector positiony(1);
  positiony[0]  = RcppDeepState_double();
  qs::c_qsave(positiony,"/home/akhila/fuzzer_packages/fuzzedpackages/rayshader/inst/testfiles/is_inside/inputs/positiony.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "positiony values: "<< positiony << std::endl;
  NumericVector sinval(1);
  sinval[0]  = RcppDeepState_double();
  qs::c_qsave(sinval,"/home/akhila/fuzzer_packages/fuzzedpackages/rayshader/inst/testfiles/is_inside/inputs/sinval.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sinval values: "<< sinval << std::endl;
  NumericVector cosval(1);
  cosval[0]  = RcppDeepState_double();
  qs::c_qsave(cosval,"/home/akhila/fuzzer_packages/fuzzedpackages/rayshader/inst/testfiles/is_inside/inputs/cosval.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "cosval values: "<< cosval << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    is_inside(sizehex[0],positionx[0],positiony[0],sinval[0],cosval[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
