// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rayshade_multicore_DeepState_TestHarness_generation.cpp and rayshade_multicore_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix rayshade_multicore(double sunangle, NumericVector anglebreaks, NumericMatrix& heightmap, double zscale, NumericVector chunkindices, double maxsearch, NumericVector& cache_mask);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector sunangle(1);
  sunangle[0]  = RcppDeepState_double();
  std::string sunangle_t = "/home/akhila/fuzzer_packages/fuzzedpackages/rayshader/inst/testfiles/rayshade_multicore/libFuzzer_rayshade_multicore/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_sunangle.qs";
  qs::c_qsave(sunangle,sunangle_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sunangle values: "<< sunangle << std::endl;
  NumericVector anglebreaks  = RcppDeepState_NumericVector();
  std::string anglebreaks_t = "/home/akhila/fuzzer_packages/fuzzedpackages/rayshader/inst/testfiles/rayshade_multicore/libFuzzer_rayshade_multicore/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_anglebreaks.qs";
  qs::c_qsave(anglebreaks,anglebreaks_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "anglebreaks values: "<< anglebreaks << std::endl;
  NumericMatrix heightmap  = RcppDeepState_NumericMatrix();
  std::string heightmap_t = "/home/akhila/fuzzer_packages/fuzzedpackages/rayshader/inst/testfiles/rayshade_multicore/libFuzzer_rayshade_multicore/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_heightmap.qs";
  qs::c_qsave(heightmap,heightmap_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "heightmap values: "<< heightmap << std::endl;
  NumericVector zscale(1);
  zscale[0]  = RcppDeepState_double();
  std::string zscale_t = "/home/akhila/fuzzer_packages/fuzzedpackages/rayshader/inst/testfiles/rayshade_multicore/libFuzzer_rayshade_multicore/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_zscale.qs";
  qs::c_qsave(zscale,zscale_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "zscale values: "<< zscale << std::endl;
  NumericVector chunkindices  = RcppDeepState_NumericVector();
  std::string chunkindices_t = "/home/akhila/fuzzer_packages/fuzzedpackages/rayshader/inst/testfiles/rayshade_multicore/libFuzzer_rayshade_multicore/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_chunkindices.qs";
  qs::c_qsave(chunkindices,chunkindices_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "chunkindices values: "<< chunkindices << std::endl;
  NumericVector maxsearch(1);
  maxsearch[0]  = RcppDeepState_double();
  std::string maxsearch_t = "/home/akhila/fuzzer_packages/fuzzedpackages/rayshader/inst/testfiles/rayshade_multicore/libFuzzer_rayshade_multicore/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_maxsearch.qs";
  qs::c_qsave(maxsearch,maxsearch_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxsearch values: "<< maxsearch << std::endl;
  NumericVector cache_mask  = RcppDeepState_NumericVector();
  std::string cache_mask_t = "/home/akhila/fuzzer_packages/fuzzedpackages/rayshader/inst/testfiles/rayshade_multicore/libFuzzer_rayshade_multicore/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_cache_mask.qs";
  qs::c_qsave(cache_mask,cache_mask_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "cache_mask values: "<< cache_mask << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rayshade_multicore(sunangle[0],anglebreaks,heightmap,zscale[0],chunkindices,maxsearch[0],cache_mask);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
