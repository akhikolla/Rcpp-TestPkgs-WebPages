// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// bc_no_trans_DeepState_TestHarness_generation.cpp and bc_no_trans_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::NumericVector bc_no_trans(const Rcpp::NumericVector& psi, const Rcpp::NumericVector& lambda, const Rcpp::NumericVector& gm, const Rcpp::NumericVector& con);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector psi  = RcppDeepState_NumericVector();
  std::string psi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/rust/inst/testfiles/bc_no_trans/libFuzzer_bc_no_trans/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_psi.qs";
  qs::c_qsave(psi,psi_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "psi values: "<< psi << std::endl;
  NumericVector lambda  = RcppDeepState_NumericVector();
  std::string lambda_t = "/home/akhila/fuzzer_packages/fuzzedpackages/rust/inst/testfiles/bc_no_trans/libFuzzer_bc_no_trans/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lambda.qs";
  qs::c_qsave(lambda,lambda_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda values: "<< lambda << std::endl;
  NumericVector gm  = RcppDeepState_NumericVector();
  std::string gm_t = "/home/akhila/fuzzer_packages/fuzzedpackages/rust/inst/testfiles/bc_no_trans/libFuzzer_bc_no_trans/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_gm.qs";
  qs::c_qsave(gm,gm_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gm values: "<< gm << std::endl;
  NumericVector con  = RcppDeepState_NumericVector();
  std::string con_t = "/home/akhila/fuzzer_packages/fuzzedpackages/rust/inst/testfiles/bc_no_trans/libFuzzer_bc_no_trans/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_con.qs";
  qs::c_qsave(con,con_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "con values: "<< con << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    bc_no_trans(psi,lambda,gm,con);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
