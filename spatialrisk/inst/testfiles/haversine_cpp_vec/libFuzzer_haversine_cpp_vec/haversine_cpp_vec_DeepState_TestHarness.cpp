// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// haversine_cpp_vec_DeepState_TestHarness_generation.cpp and haversine_cpp_vec_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::NumericVector haversine_cpp_vec(Rcpp::NumericVector latFrom, Rcpp::NumericVector lonFrom, Rcpp::NumericVector latTo, Rcpp::NumericVector lonTo, double earth_radius);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector latFrom  = RcppDeepState_NumericVector();
  std::string latFrom_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spatialrisk/inst/testfiles/haversine_cpp_vec/libFuzzer_haversine_cpp_vec/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_latFrom.qs";
  qs::c_qsave(latFrom,latFrom_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "latFrom values: "<< latFrom << std::endl;
  NumericVector lonFrom  = RcppDeepState_NumericVector();
  std::string lonFrom_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spatialrisk/inst/testfiles/haversine_cpp_vec/libFuzzer_haversine_cpp_vec/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lonFrom.qs";
  qs::c_qsave(lonFrom,lonFrom_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lonFrom values: "<< lonFrom << std::endl;
  NumericVector latTo  = RcppDeepState_NumericVector();
  std::string latTo_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spatialrisk/inst/testfiles/haversine_cpp_vec/libFuzzer_haversine_cpp_vec/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_latTo.qs";
  qs::c_qsave(latTo,latTo_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "latTo values: "<< latTo << std::endl;
  NumericVector lonTo  = RcppDeepState_NumericVector();
  std::string lonTo_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spatialrisk/inst/testfiles/haversine_cpp_vec/libFuzzer_haversine_cpp_vec/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lonTo.qs";
  qs::c_qsave(lonTo,lonTo_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lonTo values: "<< lonTo << std::endl;
  NumericVector earth_radius(1);
  earth_radius[0]  = RcppDeepState_double();
  std::string earth_radius_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spatialrisk/inst/testfiles/haversine_cpp_vec/libFuzzer_haversine_cpp_vec/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_earth_radius.qs";
  qs::c_qsave(earth_radius,earth_radius_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "earth_radius values: "<< earth_radius << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    haversine_cpp_vec(latFrom,lonFrom,latTo,lonTo,earth_radius[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
