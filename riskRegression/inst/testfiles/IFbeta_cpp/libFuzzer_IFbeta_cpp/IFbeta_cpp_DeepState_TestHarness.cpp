// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// IFbeta_cpp_DeepState_TestHarness_generation.cpp and IFbeta_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

arma::mat IFbeta_cpp(const NumericVector& newT, const NumericVector& neweXb, const arma::mat& newX, const NumericVector& newStatus, const IntegerVector& newIndexJump, const NumericVector& S01, const arma::mat& E1, const NumericVector& time1, const arma::mat& iInfo, int p);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector newT  = RcppDeepState_NumericVector();
  std::string newT_t = "/home/akhila/fuzzer_packages/fuzzedpackages/riskRegression/inst/testfiles/IFbeta_cpp/libFuzzer_IFbeta_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_newT.qs";
  qs::c_qsave(newT,newT_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "newT values: "<< newT << std::endl;
  NumericVector neweXb  = RcppDeepState_NumericVector();
  std::string neweXb_t = "/home/akhila/fuzzer_packages/fuzzedpackages/riskRegression/inst/testfiles/IFbeta_cpp/libFuzzer_IFbeta_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_neweXb.qs";
  qs::c_qsave(neweXb,neweXb_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "neweXb values: "<< neweXb << std::endl;
  std::ofstream newX_stream;
  arma::mat newX  = RcppDeepState_mat();
  newX_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/riskRegression/inst/testfiles/IFbeta_cpp/inputs/newX");
  newX_stream << newX;
  std::cout << "newX values: "<< newX << std::endl;
  newX_stream.close();
  NumericVector newStatus  = RcppDeepState_NumericVector();
  std::string newStatus_t = "/home/akhila/fuzzer_packages/fuzzedpackages/riskRegression/inst/testfiles/IFbeta_cpp/libFuzzer_IFbeta_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_newStatus.qs";
  qs::c_qsave(newStatus,newStatus_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "newStatus values: "<< newStatus << std::endl;
  IntegerVector newIndexJump  = RcppDeepState_IntegerVector();
  std::string newIndexJump_t = "/home/akhila/fuzzer_packages/fuzzedpackages/riskRegression/inst/testfiles/IFbeta_cpp/libFuzzer_IFbeta_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_newIndexJump.qs";
  qs::c_qsave(newIndexJump,newIndexJump_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "newIndexJump values: "<< newIndexJump << std::endl;
  NumericVector S01  = RcppDeepState_NumericVector();
  std::string S01_t = "/home/akhila/fuzzer_packages/fuzzedpackages/riskRegression/inst/testfiles/IFbeta_cpp/libFuzzer_IFbeta_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_S01.qs";
  qs::c_qsave(S01,S01_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "S01 values: "<< S01 << std::endl;
  std::ofstream E1_stream;
  arma::mat E1  = RcppDeepState_mat();
  E1_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/riskRegression/inst/testfiles/IFbeta_cpp/inputs/E1");
  E1_stream << E1;
  std::cout << "E1 values: "<< E1 << std::endl;
  E1_stream.close();
  NumericVector time1  = RcppDeepState_NumericVector();
  std::string time1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/riskRegression/inst/testfiles/IFbeta_cpp/libFuzzer_IFbeta_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_time1.qs";
  qs::c_qsave(time1,time1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "time1 values: "<< time1 << std::endl;
  std::ofstream iInfo_stream;
  arma::mat iInfo  = RcppDeepState_mat();
  iInfo_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/riskRegression/inst/testfiles/IFbeta_cpp/inputs/iInfo");
  iInfo_stream << iInfo;
  std::cout << "iInfo values: "<< iInfo << std::endl;
  iInfo_stream.close();
  IntegerVector p(1);
  p[0]  = RcppDeepState_int();
  std::string p_t = "/home/akhila/fuzzer_packages/fuzzedpackages/riskRegression/inst/testfiles/IFbeta_cpp/libFuzzer_IFbeta_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_p.qs";
  qs::c_qsave(p,p_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p values: "<< p << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    IFbeta_cpp(newT,neweXb,newX,newStatus,newIndexJump,S01,E1,time1,iInfo,p[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
