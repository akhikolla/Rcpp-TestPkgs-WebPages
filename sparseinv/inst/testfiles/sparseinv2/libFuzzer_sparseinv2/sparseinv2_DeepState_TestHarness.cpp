// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// sparseinv2_DeepState_TestHarness_generation.cpp and sparseinv2_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector sparseinv2(int n, IntegerVector Lp, IntegerVector Li, NumericVector Lx, NumericVector d, IntegerVector Up, IntegerVector Uj, NumericVector Ux, IntegerVector Zp, IntegerVector Zi);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector n(1);
  n[0]  = RcppDeepState_int();
  std::string n_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/libFuzzer_sparseinv2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_n.qs";
  qs::c_qsave(n,n_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  IntegerVector Lp  = RcppDeepState_IntegerVector();
  std::string Lp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/libFuzzer_sparseinv2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Lp.qs";
  qs::c_qsave(Lp,Lp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Lp values: "<< Lp << std::endl;
  IntegerVector Li  = RcppDeepState_IntegerVector();
  std::string Li_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/libFuzzer_sparseinv2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Li.qs";
  qs::c_qsave(Li,Li_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Li values: "<< Li << std::endl;
  NumericVector Lx  = RcppDeepState_NumericVector();
  std::string Lx_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/libFuzzer_sparseinv2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Lx.qs";
  qs::c_qsave(Lx,Lx_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Lx values: "<< Lx << std::endl;
  NumericVector d  = RcppDeepState_NumericVector();
  std::string d_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/libFuzzer_sparseinv2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_d.qs";
  qs::c_qsave(d,d_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "d values: "<< d << std::endl;
  IntegerVector Up  = RcppDeepState_IntegerVector();
  std::string Up_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/libFuzzer_sparseinv2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Up.qs";
  qs::c_qsave(Up,Up_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Up values: "<< Up << std::endl;
  IntegerVector Uj  = RcppDeepState_IntegerVector();
  std::string Uj_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/libFuzzer_sparseinv2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Uj.qs";
  qs::c_qsave(Uj,Uj_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Uj values: "<< Uj << std::endl;
  NumericVector Ux  = RcppDeepState_NumericVector();
  std::string Ux_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/libFuzzer_sparseinv2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Ux.qs";
  qs::c_qsave(Ux,Ux_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Ux values: "<< Ux << std::endl;
  IntegerVector Zp  = RcppDeepState_IntegerVector();
  std::string Zp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/libFuzzer_sparseinv2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Zp.qs";
  qs::c_qsave(Zp,Zp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Zp values: "<< Zp << std::endl;
  IntegerVector Zi  = RcppDeepState_IntegerVector();
  std::string Zi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/libFuzzer_sparseinv2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Zi.qs";
  qs::c_qsave(Zi,Zi_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Zi values: "<< Zi << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    sparseinv2(n[0],Lp,Li,Lx,d,Up,Uj,Ux,Zp,Zi);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
