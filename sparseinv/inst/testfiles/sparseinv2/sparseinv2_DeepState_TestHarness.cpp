// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// sparseinv2_DeepState_TestHarness_generation.cpp and sparseinv2_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector sparseinv2(int n, IntegerVector Lp, IntegerVector Li, NumericVector Lx, NumericVector d, IntegerVector Up, IntegerVector Uj, NumericVector Ux, IntegerVector Zp, IntegerVector Zi);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  IntegerVector n(1);
  n[0]  = RcppDeepState_int();
  qs::c_qsave(n,"/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/inputs/n.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  IntegerVector Lp  = RcppDeepState_IntegerVector();
  qs::c_qsave(Lp,"/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/inputs/Lp.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Lp values: "<< Lp << std::endl;
  IntegerVector Li  = RcppDeepState_IntegerVector();
  qs::c_qsave(Li,"/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/inputs/Li.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Li values: "<< Li << std::endl;
  NumericVector Lx  = RcppDeepState_NumericVector();
  qs::c_qsave(Lx,"/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/inputs/Lx.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Lx values: "<< Lx << std::endl;
  NumericVector d  = RcppDeepState_NumericVector();
  qs::c_qsave(d,"/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/inputs/d.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "d values: "<< d << std::endl;
  IntegerVector Up  = RcppDeepState_IntegerVector();
  qs::c_qsave(Up,"/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/inputs/Up.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Up values: "<< Up << std::endl;
  IntegerVector Uj  = RcppDeepState_IntegerVector();
  qs::c_qsave(Uj,"/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/inputs/Uj.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Uj values: "<< Uj << std::endl;
  NumericVector Ux  = RcppDeepState_NumericVector();
  qs::c_qsave(Ux,"/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/inputs/Ux.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Ux values: "<< Ux << std::endl;
  IntegerVector Zp  = RcppDeepState_IntegerVector();
  qs::c_qsave(Zp,"/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/inputs/Zp.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Zp values: "<< Zp << std::endl;
  IntegerVector Zi  = RcppDeepState_IntegerVector();
  qs::c_qsave(Zi,"/home/akhila/fuzzer_packages/fuzzedpackages/sparseinv/inst/testfiles/sparseinv2/inputs/Zi.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Zi values: "<< Zi << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    sparseinv2(n[0],Lp,Li,Lx,d,Up,Uj,Ux,Zp,Zi);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
