// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// movfit_Rcpp_DeepState_TestHarness_generation.cpp and movfit_Rcpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double movfit_Rcpp(NumericVector par, double prb, double frac);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector par  = RcppDeepState_NumericVector();
  std::string par_t = "/home/akhila/fuzzer_packages/fuzzedpackages/MSEtool/inst/testfiles/movfit_Rcpp/libFuzzer_movfit_Rcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_par.qs";
  qs::c_qsave(par,par_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "par values: "<< par << std::endl;
  NumericVector prb(1);
  prb[0]  = RcppDeepState_double();
  std::string prb_t = "/home/akhila/fuzzer_packages/fuzzedpackages/MSEtool/inst/testfiles/movfit_Rcpp/libFuzzer_movfit_Rcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_prb.qs";
  qs::c_qsave(prb,prb_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "prb values: "<< prb << std::endl;
  NumericVector frac(1);
  frac[0]  = RcppDeepState_double();
  std::string frac_t = "/home/akhila/fuzzer_packages/fuzzedpackages/MSEtool/inst/testfiles/movfit_Rcpp/libFuzzer_movfit_Rcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_frac.qs";
  qs::c_qsave(frac,frac_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "frac values: "<< frac << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    movfit_Rcpp(par,prb[0],frac[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
